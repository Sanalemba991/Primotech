---
// src/pages/products/switch/[slug].astro
import Layout from "../../../layouts/Layout.astro";
import Whatsapp from '../../../components/Whatsapp';
import { getCollection, getEntryBySlug } from "astro:content";

export async function getStaticPaths() {
  const products = await getCollection("pandabseries");
  return products.map((product) => ({
    params: { slug: product.slug },
    props: { product },
  }));
}

const { slug } = Astro.params;
const { product } = Astro.props;
const productData = product?.data;

const allProducts = await getCollection("pandabseries");
const relatedProducts = allProducts.filter(p => p.slug !== slug).slice(0, 3);

// Helper function to render specifications (updated to match new pandabseries schema)
function renderSpecifications(specs) {
  if (!specs) return [];
  const specGroups = [];

  // Imaging
  const imagingSpecs = [];
  if (specs["Sensor"]) imagingSpecs.push(["Sensor", specs["Sensor"]]);
  if (specs["Minimum Illumination"]) imagingSpecs.push(["Minimum Illumination", specs["Minimum Illumination"]]);
  if (specs["Day/Night"]) imagingSpecs.push(["Day/Night", specs["Day/Night"]]);
  if (specs["Shutter"]) imagingSpecs.push(["Shutter", specs["Shutter"]]);
  if (specs["Adjustment angle"]) imagingSpecs.push(["Adjustment angle", specs["Adjustment angle"]]);
  if (specs["WDR"]) imagingSpecs.push(["WDR", specs["WDR"]]);
  if (specs["Lens Type"]) imagingSpecs.push(["Lens Type", specs["Lens Type"]]);
  if (specs["Iris"]) imagingSpecs.push(["Iris", specs["Iris"]]);
  if (specs["Field of View (H)"]) imagingSpecs.push(["Field of View (H)", specs["Field of View (H)"]]);
  if (specs["Field of View (V)"]) imagingSpecs.push(["Field of View (V)", specs["Field of View (V)"]]);
  if (specs["Field of View (D)"]) imagingSpecs.push(["Field of View (D)", specs["Field of View (D)"]]);
  if (specs["DORI Distance (Lens)"]) imagingSpecs.push(["DORI Distance (Lens)", specs["DORI Distance (Lens)"]]);
  if (specs["DORI Distance (Detect)"]) imagingSpecs.push(["DORI Distance (Detect)", specs["DORI Distance (Detect)"]]);
  if (specs["DORI Distance (Observe)"]) imagingSpecs.push(["DORI Distance (Observe)", specs["DORI Distance (Observe)"]]);
  if (specs["DORI Distance (Recognize)"]) imagingSpecs.push(["DORI Distance (Recognize)", specs["DORI Distance (Recognize)"]]);
  if (specs["DORI Distance (Identify)"]) imagingSpecs.push(["DORI Distance (Identify)", specs["DORI Distance (Identify)"]]);
  if (imagingSpecs.length > 0) specGroups.push({ title: "Imaging", specs: imagingSpecs });

  // Illumination
  const illumSpecs = [];
  if (specs["IR Range"]) illumSpecs.push(["IR Range", specs["IR Range"]]);
  if (specs["Wavelength"]) illumSpecs.push(["Wavelength", specs["Wavelength"]]);
  if (specs["IR On/Off Control"]) illumSpecs.push(["IR On/Off Control", specs["IR On/Off Control"]]);
  if (illumSpecs.length > 0) specGroups.push({ title: "Illumination", specs: illumSpecs });

  // Video
  const videoSpecs = [];
  if (specs["Video Compression"]) videoSpecs.push(["Video Compression", specs["Video Compression"]]);
  if (specs["H.264 code profile"]) videoSpecs.push(["H.264 code profile", specs["H.264 code profile"]]);
  if (specs["Frame Rate"]) videoSpecs.push(["Frame Rate", specs["Frame Rate"]]);
  if (specs["Video Bit Rate"]) videoSpecs.push(["Video Bit Rate", specs["Video Bit Rate"]]);
  if (specs["U-code"]) videoSpecs.push(["U-code", specs["U-code"]]);
  if (specs["OSD"]) videoSpecs.push(["OSD", specs["OSD"]]);
  if (specs["Privacy Mask"]) videoSpecs.push(["Privacy Mask", specs["Privacy Mask"]]);
  if (specs["ROI"]) videoSpecs.push(["ROI", specs["ROI"]]);
  if (specs["Video stream"]) videoSpecs.push(["Video stream", specs["Video stream"]]);
  if (videoSpecs.length > 0) specGroups.push({ title: "Video", specs: videoSpecs });

  // Image Enhancement
  const enhancementSpecs = [];
  if (specs["White Balance"]) enhancementSpecs.push(["White Balance", specs["White Balance"]]);
  if (specs["Digital Noise Reduction"]) enhancementSpecs.push(["Digital Noise Reduction", specs["Digital Noise Reduction"]]);
  if (specs["Smart IR"]) enhancementSpecs.push(["Smart IR", specs["Smart IR"]]);
  if (specs["Flip"]) enhancementSpecs.push(["Flip", specs["Flip"]]);
  if (specs["Dewarping"]) enhancementSpecs.push(["Dewarping", specs["Dewarping"]]);
  if (specs["HLC"]) enhancementSpecs.push(["HLC", specs["HLC"]]);
  if (specs["BLC"]) enhancementSpecs.push(["BLC", specs["BLC"]]);
  if (specs["Defog"]) enhancementSpecs.push(["Defog", specs["Defog"]]);
  if (enhancementSpecs.length > 0) specGroups.push({ title: "Image Enhancement", specs: enhancementSpecs });

  // Intelligence
  const smartSpecs = [];
  if (specs["Basic Detection"]) smartSpecs.push(["Basic Detection", specs["Basic Detection"]]);
  if (specs["General Function"]) smartSpecs.push(["General Function", specs["General Function"]]);
  if (smartSpecs.length > 0) specGroups.push({ title: "Intelligence", specs: smartSpecs });

  // Storage
  const storageSpecs = [];
  if (specs["Edge Storage"]) storageSpecs.push(["Edge Storage", specs["Edge Storage"]]);
  if (specs["Network Storage"]) storageSpecs.push(["Network Storage", specs["Network Storage"]]);
  if (storageSpecs.length > 0) specGroups.push({ title: "Storage", specs: storageSpecs });

  // Audio
  const audioSpecs = [];
  if (specs["Audio Compression"]) audioSpecs.push(["Audio Compression", specs["Audio Compression"]]);
  if (specs["Audio Bitrate"]) audioSpecs.push(["Audio Bitrate", specs["Audio Bitrate"]]);
  if (specs["Two-way Audio"]) audioSpecs.push(["Two-way Audio", specs["Two-way Audio"]]);
  if (specs["Suppression"]) audioSpecs.push(["Suppression", specs["Suppression"]]);
  if (specs["Sampling Rate"]) audioSpecs.push(["Sampling Rate", specs["Sampling Rate"]]);
  if (audioSpecs.length > 0) specGroups.push({ title: "Audio", specs: audioSpecs });

  // Network
  const networkSpecs = [];
  if (specs["Wi-Fi"]) networkSpecs.push(["Wi-Fi", specs["Wi-Fi"]]);
  if (specs["Protocols"]) networkSpecs.push(["Protocols", specs["Protocols"]]);
  if (specs["Compatible Integration"]) networkSpecs.push(["Compatible Integration", specs["Compatible Integration"]]);
  if (specs["User/Host"]) networkSpecs.push(["User/Host", specs["User/Host"]]);
  if (specs["Client"]) networkSpecs.push(["Client", specs["Client"]]);
  if (specs["Web Browser"]) networkSpecs.push(["Web Browser", specs["Web Browser"]]);
  if (specs["Network"]) networkSpecs.push(["Network", specs["Network"]]);
  if (networkSpecs.length > 0) specGroups.push({ title: "Network", specs: networkSpecs });

  // I/O
  const ioSpecs = [];
  if (specs["Audio I/O"]) ioSpecs.push(["Audio I/O", specs["Audio I/O"]]);
  if (specs["Alarm I/O"]) ioSpecs.push(["Alarm I/O", specs["Alarm I/O"]]);
  if (specs["Built-in Mic"]) ioSpecs.push(["Built-in Mic", specs["Built-in Mic"]]);
  if (specs["Built-in Speaker"]) ioSpecs.push(["Built-in Speaker", specs["Built-in Speaker"]]);
  if (ioSpecs.length > 0) specGroups.push({ title: "I/O", specs: ioSpecs });

  // Video Output
  const videoOutputSpecs = [];
  if (specs["Video Output"]) videoOutputSpecs.push(["Video Output", specs["Video Output"]]);
  if (videoOutputSpecs.length > 0) specGroups.push({ title: "Video Output", specs: videoOutputSpecs });

  // Power & Protection
  const powerSpecs = [];
  if (specs["Power"]) powerSpecs.push(["Power", specs["Power"]]);
  if (specs["Power consumption"]) powerSpecs.push(["Power consumption", specs["Power consumption"]]);
  if (specs["Power Interface"]) powerSpecs.push(["Power Interface", specs["Power Interface"]]);
  if (specs["Surge Protection"]) powerSpecs.push(["Surge Protection", specs["Surge Protection"]]);
  if (specs["Reset Button"]) powerSpecs.push(["Reset Button", specs["Reset Button"]]);
  if (specs["LED indicator"]) powerSpecs.push(["LED indicator", specs["LED indicator"]]);
  if (specs["Protection"]) powerSpecs.push(["Protection", specs["Protection"]]);
  if (powerSpecs.length > 0) specGroups.push({ title: "Power & Protection", specs: powerSpecs });

  // Physical
  const physicalSpecs = [];
  if (specs["Dimensions"]) physicalSpecs.push(["Dimensions", specs["Dimensions"]]);
  if (specs["Weight"]) physicalSpecs.push(["Weight", specs["Weight"]]);
  if (specs["Material"]) physicalSpecs.push(["Material", specs["Material"]]);
  if (specs["Working Environment"]) physicalSpecs.push(["Working Environment", specs["Working Environment"]]);
  if (specs["Storage Environment"]) physicalSpecs.push(["Storage Environment", specs["Storage Environment"]]);
  if (physicalSpecs.length > 0) specGroups.push({ title: "Physical", specs: physicalSpecs });

  // Certifications
  const certSpecs = [];
  if (specs["EMC"]) certSpecs.push(["EMC", specs["EMC"]]);
  if (specs["RF"]) certSpecs.push(["RF", specs["RF"]]);
  if (specs["CE RED"]) certSpecs.push(["CE RED", specs["CE RED"]]);
  if (specs["Safety"]) certSpecs.push(["Safety", specs["Safety"]]);
  if (specs["Environment"]) certSpecs.push(["Environment", specs["Environment"]]);
  if (specs["Protection"]) certSpecs.push(["Protection", specs["Protection"]]);
  if (certSpecs.length > 0) specGroups.push({ title: "Certifications", specs: certSpecs });

  return specGroups;
}

const specificationGroups = renderSpecifications(productData?.specifications);

// Build canonical URL and structured data
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const structuredData = [
  {
    "@context": "https://schema.org",
    "@type": "Product",
    "name": productData?.title,
    "description": productData?.description,
    "image": productData?.images?.[0]?.url
      ? new URL(productData.images[0].url, Astro.site).toString()
      : (productData?.image ? new URL(productData.image, Astro.site).toString() : ""),
    "productType": "Panda B Series",
    "offers": {
      "@type": "Offer",
      "priceCurrency": "AED",
      "price": "0.00",
      "availability": "https://schema.org/InStock",
      "itemCondition": "https://schema.org/NewCondition"
    },
    "specification": productData?.specifications ?? undefined
  },
  {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
      {
        "@type": "ListItem",
        "position": 1,
        "name": "Home",
        "item": new URL("/", Astro.site).toString()
      },
      {
        "@type": "ListItem",
        "position": 2,
        "name": "Products",
        "item": new URL("/products", Astro.site).toString()
      },
      {
        "@type": "ListItem",
        "position": 3,
        "name": "Panda B",
        "item": new URL("/products/pandab", Astro.site).toString()
      },
      {
        "@type": "ListItem",
        "position": 4,
        "name": productData?.title,
        "item": canonicalURL.toString()
      },
      
    ]
  },
  {
    "@context": "https://schema.org",
    "@type": "LocalBusiness",
    "@id": "https://primotech-llc.com/#localbusiness",
    "name": "PrimoTech LLC - Uniarch Authorized Distributor Dubai",
    "image": `${Astro.url.origin}/log.png`,
    "address": {
      "@type": "PostalAddress",
      "streetAddress": "Shop 23, Musthafa Building, Satellite Market, Deira, Dubai",
      "addressLocality": "Dubai",
      "addressRegion": "Dubai",
      "postalCode": "123241",
      "addressCountry": "AE"
    },
    "geo": {
      "@type": "GeoCoordinates",
      "latitude": "25.2048",
      "longitude": "55.2708"
    },
    "telephone": "+971 52 879 6664",
    "priceRange": "$$",
    "contactPoint": {
      "@type": "ContactPoint",
      "telephone": "+971 52 879 6664",
      "contactType": ["sales", "customer service", "support"],
      "email": "info@primotech-llc.com",
      "areaServed": ["AE"],
      "availableLanguage": ["English", "Arabic"],
      "address": {
        "@type": "PostalAddress",
        "streetAddress": "Shop 23, Musthafa Building, Satellite Market, Deira, Dubai",
        "addressLocality": "Dubai",
        "addressRegion": "Dubai",
        "postalCode": "123241",
        "addressCountry": "AE"
      }
    }
  }
];
---


<Layout
    title={`${productData?.title} - PrimoTech - Uniarch Authorized Distributor Dubai`}
    structuredData={structuredData}
    description={productData?.description}
    canonical={canonicalURL.toString()}
>
  <!-- Professional Header Banner - Cleaned: removed animation classes -->
  <section 
    id="header-banner"
    class="bg-gradient-to-r from-teal-900/80 to-transparent"
  >
    <!-- ...existing header content... -->
    <div class="header-overlay"></div>
    <div class="container">
      <nav class="breadcrumbs">
        <a href="/" class="breadcrumb-link">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor" class="breadcrumb-icon">
            <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
          </svg>
          <span class="breadcrumb-text">Home</span>
        </a>
        <span class="breadcrumb-separator">/</span>
        <a href="/products" class="breadcrumb-link">
          <span class="breadcrumb-text">Products</span>
        </a>
        <span class="breadcrumb-separator">/</span>
        <a href="/products/pandab" class="breadcrumb-link hide-on-mobile">
          <span class="breadcrumb-text">Panda B Series Cameras</span>
        </a>
        <span class="breadcrumb-separator hide-on-mobile">/</span>
        <span class="breadcrumb-current truncate">{productData?.title}</span>
      </nav>
    </div>
  </section>

  <!-- Product Overview Section - Cleaned: removed animation classes -->
  <section 
    id="product-overview"
    class="product-overview"
  >
    <!-- ...existing product overview content... -->
    <div class="container">
      <div class="product-grid">
        <!-- Product Gallery -->
        <div class="product-gallery">
          <div class="gallery-main">
            {productData?.images?.length ? (
              <div class="main-image-container">
                <img 
                  id="mainProductImage"
                  src={productData.images[0].url} 
                  alt={productData.images[0].caption || productData.title} 
                  class="main-product-image"
                />
               
              </div>
            ) : productData?.image ? (
              <div class="main-image-container">
                <img 
                  id="mainProductImage"
                  src={productData.image} 
                  alt={productData.title} 
                  class="main-product-image"
                />
              </div>
            ) : (
              <div class="main-image-container">
                <img 
                  id="mainProductImage"
                  src="/images/placeholder-camera.jpg" 
                  alt={productData?.title || "Product Image"} 
                  class="main-product-image"
                />
              </div>
            )}
          </div>
          
          {(productData?.images?.length > 1) && (
            <div class="gallery-thumbnails">
              {productData.images.map((image, index) => (
                <button 
                  class={`thumbnail-btn ${index === 0 ? 'active' : ''}`}
                  onclick={`changeMainImage(${index})`}
                  data-index={index}
                >
                  <img 
                    src={image.url} 
                    alt={image.caption || `${productData.title} - View ${index + 1}`} 
                  />
                </button>
              ))}
            </div>
          )}
        </div>

        <!-- Product Information -->
        <div class="product-details">
          <div class="product-meta">
            <span class="product-category">Panda B Cameras</span>
            <div class="product-status">
              <span class="status-badge available">In Stock</span>
            </div>
          </div>
          
          <h1 class="product-title">{productData?.title}</h1>
          
          {productData?.description && (
            <div class="product-description">
              <p>{productData.description}</p>
            </div>
          )}

          {productData?.features?.length > 0 && (
            <div class="product-highlights">
              <h3 class="highlights-title">Key Features</h3>
              <div class="features-grid">
                {productData.features.map((feature, index) => (
                  <div class="feature-item">
                    <div class="feature-icon">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                      </svg>
                    </div>
                    <span class="feature-text">{feature}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div class="product-actions">
           <a href="/contact" class="btn btn-primary">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
              </svg>
              Request Quote
              <span class="hover-effect"></span>
            </a>
            
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Technical Specifications - Cleaned: removed animation classes -->
  {specificationGroups && specificationGroups.length > 0 && (
    <section 
      id="specifications"
      class="specifications-section"
    >
      <div class="container">
        <div class="section-header">
          <div class="header-content">
            <h2 class="section-title">Technical Specifications</h2>
            <p class="section-subtitle">Detailed technical information and performance metrics</p>
          </div>
          <div class="header-actions">
            <button class="btn-download" onclick="downloadPageAsImage()">
              <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
                <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
              </svg>
              Download Image
            </button>
          </div>
        </div>

        <div class="specifications-container">
          <div class="specs-content-list">
            {specificationGroups.map((group, groupIndex) => (
              <div class="spec-category-block">
                <div class="category-header">
                  <h3 class="category-title">{group.title}</h3>
                  <div class="category-divider"></div>
                </div>
                
                <div class="category-content">
                  <div class="specs-grid">
                    {group.specs.map(([key, value]) => (
                      <div class="spec-item">
                        <div class="spec-label">{key}</div>
                        <div class="spec-detail">{value}</div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )}

  <!-- Related Products - Cleaned: removed animation classes -->
    <Whatsapp client:load />
</Layout>
<!-- html2canvas CDN for client-side screenshot -->
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    // Gallery
    function changeMainImage(index) {
      var mainImage = document.getElementById('mainProductImage');
      var thumbnails = document.querySelectorAll('.thumbnail-btn');
      var thumbnailImages = document.querySelectorAll('.thumbnail-btn img');
      if (mainImage && thumbnailImages[index]) {
        mainImage.src = thumbnailImages[index].src;
        mainImage.alt = thumbnailImages[index].alt;
        thumbnails.forEach(function(thumb, i) {
          thumb.classList.toggle('active', i === index);
        });
      }
    }
    window.changeMainImage = changeMainImage;

    // Download Specifications (use var for compatibility)
    function downloadSpecifications() {
      var productTitle = document.querySelector('.product-title')?.textContent || 'Product';
      var categoryBlocks = document.querySelectorAll('.spec-category-block');
      if (categoryBlocks.length === 0) return;
      var csv = `Product Specifications - ${productTitle}\n`;
      csv += `Generated on: ${new Date().toLocaleDateString()}\n`;
      csv += `Time: ${new Date().toLocaleTimeString()}\n\n`;
      categoryBlocks.forEach(function(block) {
        var categoryTitle = block.querySelector('.category-title')?.textContent.trim() || 'Category';
        var specItems = block.querySelectorAll('.spec-item');
        csv += `\n=== ${categoryTitle.toUpperCase()} ===\n`;
        csv += `Parameter,Specification\n`;
        specItems.forEach(function(item) {
          var label = item.querySelector('.spec-label')?.textContent.trim() || '';
          var detail = item.querySelector('.spec-detail')?.textContent.trim() || '';
          var cleanLabel = label.replace(/\s+/g, ' ').replace(/"/g, '""');
          var cleanDetail = detail.replace(/\s+/g, ' ').replace(/"/g, '""');
          var csvLabel = (cleanLabel.includes(',') || cleanLabel.includes('"') || cleanLabel.includes('\n')) 
            ? `"${cleanLabel}"` : cleanLabel;
          var csvDetail = (cleanDetail.includes(',') || cleanDetail.includes('"') || cleanDetail.includes('\n')) 
            ? `"${cleanDetail}"` : cleanDetail;
          if (csvLabel && csvDetail) {
            csv += `${csvLabel},${csvDetail}\n`;
          }
        });
        csv += '\n';
      });
      var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      var link = document.createElement('a');
      var url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      var filename = productTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase() + '_specifications.csv';
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }
    window.downloadSpecifications = downloadSpecifications;

    // Enhanced Download Page as Image with Visual Formatting
    function downloadPageAsImage() {
      const productTitle = document.querySelector('.product-title')?.textContent || 'Product';
      const btn = document.querySelector('.btn-download');
      if (btn) {
        btn.disabled = true;
        btn.innerHTML = '<svg class="spin-icon" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg> Generating...';
      }
      
      // Create an image summary container
      const imageSummary = document.createElement('div');
      imageSummary.className = 'image-summary';
      imageSummary.style.cssText = 'background: white; padding: 40px; max-width: 1200px; margin: 0 auto; font-family: system-ui, -apple-system, sans-serif;';
      
      // Add product header section
      const header = document.createElement('div');
      header.style.cssText = 'display: flex; align-items: center; margin-bottom: 30px; border-bottom: 2px solid #14b8a6; padding-bottom: 20px;';
      
      // Add company logo
        header.innerHTML = `
  <div style="margin-right: 20px;">
    <img src="/images/log.png" alt="PrimoTech LLC" style="height: 40px;" />
  </div>
  <div>
    <h1 style="margin: 0; color: #0f766e; font-size: 24px; font-weight: 700; font-family: 'Helvetica Neue', Arial, sans-serif;">${productTitle}</h1>
    <p style="margin: 5px 0 0; color: #5f6368; font-size: 14px; letter-spacing: 0.3px;">PrimoTech LLC | Analog Fixed-lens Cameras</p>
  </div>
`;
      imageSummary.appendChild(header);
      
      // Add content section in 2 columns
      const content = document.createElement('div');
      content.style.cssText = 'display: flex; gap: 30px; margin-bottom: 30px;';
      
      // Get product image
      const productImg = document.getElementById('mainProductImage');
      const productImgSrc = productImg?.src || '/images/placeholder-camera.jpg';
      
      // Left column with image
      const leftCol = document.createElement('div');
      leftCol.style.cssText = 'flex: 1; max-width: 40%;';
      leftCol.innerHTML = `
        <div style="background: #f8fafc; border-radius: 12px; padding: 20px; display: flex; align-items: center; justify-content: center; height: 300px; border: 1px solid #e5e7eb;">
          <img src="${productImgSrc}" alt="${productTitle}" style="max-width: 100%; max-height: 100%; object-fit: contain;" />
        </div>
      `;
      content.appendChild(leftCol);
      
      // Right column with features
      const rightCol = document.createElement('div');
      rightCol.style.cssText = 'flex: 1; max-width: 60%;';
      
      // Add description if available
      const description = document.querySelector('.product-description p')?.textContent;
      if (description) {
        rightCol.innerHTML += `
          <div style="margin-bottom: 20px;">
            <h3 style="margin: 0 0 10px; color: #1f2937; font-size: 16px;">Description</h3>
            <p style="margin: 0; color: #4b5563; font-size: 14px; line-height: 1.6;">${description}</p>
          </div>
        `;
      }
      
      // Add features if available
      const features = Array.from(document.querySelectorAll('.feature-item .feature-text')).map(el => el.textContent);
      if (features.length) {
        rightCol.innerHTML += `
          <div>
            <h3 style="margin: 0 0 10px; color: #1f2937; font-size: 16px;">Key Features</h3>
            <ul style="margin: 0; padding-left: 20px; color: #4b5563; font-size: 14px; line-height: 1.6;">
              ${features.map(feature => `<li style="margin-bottom: 8px;">${feature}</li>`).join('')}
            </ul>
          </div>
        `;
      }
      content.appendChild(rightCol);
      imageSummary.appendChild(content);
      
      // Add specifications section
      const specs = document.createElement('div');
      specs.style.cssText = 'margin-top: 30px;';
      
      specs.innerHTML = `
        <h2 style="margin: 0 0 15px; color: #1f2937; font-size: 20px; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px;">Technical Specifications</h2>
      `;
      
      // Get specs from the page
      const specGroups = document.querySelectorAll('.spec-category-block');
      if (specGroups.length) {
        const specsGrid = document.createElement('div');
        specsGrid.style.cssText = 'display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 20px;';
        
        specGroups.forEach(group => {
          const title = group.querySelector('.category-title')?.textContent;
          const items = Array.from(group.querySelectorAll('.spec-item')).map(item => {
            const label = item.querySelector('.spec-label')?.textContent;
            const value = item.querySelector('.spec-detail')?.textContent;
            return { label, value };
          });
          
          if (title && items.length) {
            const groupEl = document.createElement('div');
            groupEl.style.cssText = 'background: #f8fafc; border-radius: 8px; padding: 15px; border: 1px solid #e5e7eb;';
            
            let groupContent = `<h3 style="margin: 0 0 12px; color: #14b8a6; font-size: 15px; border-bottom: 1px solid #e5e7eb; padding-bottom: 8px;">${title}</h3>`;
            groupContent += '<table style="width: 100%; border-collapse: collapse; font-size: 13px;">';
            
            items.forEach(item => {
              if (item.label && item.value) {
                groupContent += `
                  <tr>
                    <td style="padding: 6px 0; color: #4b5563; font-weight: 600; vertical-align: top;">${item.label}:</td>
                    <td style="padding: 6px 0; color: #1f2937; vertical-align: top;">${item.value}</td>
                  </tr>
                `;
              }
            });
            
            groupContent += '</table>';
            groupEl.innerHTML = groupContent;
            specsGrid.appendChild(groupEl);
          }
        });
        
        specs.appendChild(specsGrid);
      } else {
        specs.innerHTML += '<p style="color: #6b7280; font-style: italic;">No specifications available for this product.</p>';
      }
      
      imageSummary.appendChild(specs);
      
      // Add footer with date and disclaimer
      const footer = document.createElement('div');
      footer.style.cssText = 'margin-top: 40px; border-top: 1px solid #e5e7eb; padding-top: 20px; font-size: 12px; color: #6b7280; text-align: center;';
      
      const now = new Date();
      footer.innerHTML = `
        <p style="margin: 0;">Document generated on ${now.toLocaleDateString()} at ${now.toLocaleTimeString()}</p>
        <p style="margin: 5px 0 0;">© ${now.getFullYear()} PrimoTech LLC</p>
      `;
      imageSummary.appendChild(footer);
      
      // Add the summary to the page temporarily (hidden) for html2canvas to capture it
      imageSummary.style.position = 'absolute';
      imageSummary.style.left = '-9999px';
      imageSummary.style.top = '-9999px';
      document.body.appendChild(imageSummary);
      
      // Use html2canvas to generate the image
      html2canvas(imageSummary, {
        backgroundColor: '#fff',
        scale: 2,
        logging: false,
        useCORS: true,
        allowTaint: false
      }).then(canvas => {
        // Convert to image and download
        const dataUrl = canvas.toDataURL('image/png');
        const link = document.createElement('a');
        link.href = dataUrl;
        const filename = productTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase() + '_specifications.png';
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // Clean up
        document.body.removeChild(imageSummary);
        if (btn) {
          btn.disabled = false;
          btn.innerHTML = '<svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor"><path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/></svg> Download Image';
        }
      }).catch(error => {
        console.error('Failed to generate image:', error);
        if (btn) {
          btn.disabled = false;
          btn.innerHTML = '<svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor"><path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/></svg> Download Image';
        }
        document.body.removeChild(imageSummary);
        alert('Failed to generate the image. Please try again.');
      });
    }
    window.downloadPageAsImage = downloadPageAsImage;

    // Tab switching
    function showSpecGroup(index) {
      var tabs = document.querySelectorAll('.nav-tab');
      var groups = document.querySelectorAll('.spec-group');
      tabs.forEach(function(tab, i) {
        tab.classList.toggle('active', i === index);
      });
      groups.forEach(function(group, i) {
        group.classList.toggle('active', i === index);
      });
    }
    window.showSpecGroup = showSpecGroup;

    // Initialize first thumbnail/tab/group on DOMContentLoaded
    var firstThumbnail = document.querySelector('.thumbnail-btn');
    if (firstThumbnail) firstThumbnail.classList.add('active');
    var firstTab = document.querySelector('.nav-tab');
    var firstGroup = document.querySelector('.spec-group');
    if (firstTab && firstGroup) {
      firstTab.classList.add('active');
      firstGroup.classList.add('active');
    }


  });
</script>

<!-- Add styling for the loading spinner -->
<style>
  /* CSS Variables for Professional Theme */
  :root {
    --primary-color: #2dd4bf; /* teal-400 */
    --primary-hover: #14b8a6; /* teal-500 */
    --secondary-color: #6b7280;
    --success-color: #059669;
    --background-primary: #ffffff;
    --background-secondary: #f8fafc;
    --background-tertiary: #f1f5f9;
    --text-primary: #1f2937;
    --text-secondary: #4b5563;
    --text-muted: #6b7280;
    --border-color: #e5e7eb;
    --border-color-strong: #d1d5db;
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
    --radius-sm: 6px;
    --radius-md: 8px;
    --radius-lg: 12px;
  }

  /* Base Styles */
  * {
    box-sizing: border-box;
  }

  .container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* Professional Header */
  
  .header-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><g fill="%23ffffff" fill-opacity="0.03"><circle cx="30" cy="30" r="2"/></g></g></svg>');
    opacity: 0.3;
  }

  .breadcrumbs {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.75rem;
    position: relative;
    z-index: 1;
    max-width: 100%;
    overflow: hidden;
  }

  .breadcrumb-link {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    white-space: nowrap;
  }

  .breadcrumb-link:hover {
    color: white;
  }

  .breadcrumb-separator {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.75rem;
  }

  .breadcrumb-current {
    color: white;
    font-weight: 500;
    max-width: 180px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    display: inline-block;
  }
  
  .breadcrumb-icon {
    flex-shrink: 0;
  }
  
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  @media (max-width: 480px) {
    .hide-on-mobile {
      display: none;
    }
    
    .breadcrumb-current {
      max-width: 120px;
    }
    
    .breadcrumbs {
      font-size: 0.7rem;
      gap: 0.25rem;
    }
  }
  
  @media (min-width: 481px) and (max-width: 640px) {
    .breadcrumb-current {
      max-width: 150px;
    }
    
    .breadcrumbs {
      font-size: 0.75rem;
    }
  }

  /* Product Overview */
  .product-overview {
    padding: 4rem 0;
    background: var(--background-primary);
  }

  .product-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: start;
  }

  /* Professional Gallery - Updated for better sticky behavior on desktop */
  .product-gallery {
    position: relative;
  }

  @media (min-width: 992px) {
    .product-gallery {
      position: sticky;
      top: 2rem;
      align-self: flex-start;
      max-height: calc(100vh - 4rem);
      overflow-y: auto;
      /* Hide scrollbar for clean appearance */
      scrollbar-width: none; /* Firefox */
      -ms-overflow-style: none; /* IE and Edge */
    }
    
    /* Hide scrollbar for Chrome, Safari and Opera */
    .product-gallery::-webkit-scrollbar {
      display: none;
    }

    /* Ensure thumbnail container doesn't overflow */
    .gallery-thumbnails {
      flex-wrap: wrap;
      justify-content: center;
      max-width: 100%;
    }
  }

  /* Mobile-specific grid order */
  @media (max-width: 991px) {
    .product-grid {
      grid-template-columns: 1fr;
    }

    /* Make gallery appear first on mobile */
    .product-gallery {
      order: 1;
      margin-bottom: 2rem;
      position: relative;
    }

    /* Make product details appear second on mobile */
    .product-details {
      order: 2;
    }

    /* Improve image container on mobile */
    .main-image-container {
      min-height: 300px;
      padding: 1.5rem;
    }

    .main-product-image {
      max-height: 250px;
    }
  }

  /* Optimize gallery for different screen sizes */
  .gallery-main {
    margin-bottom: 1.5rem;
  }

  .main-image-container {
    position: relative;
    background: var(--background-secondary);
    border-radius: var(--radius-lg);
    padding: 2rem;
    min-height: 400px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid var(--border-color);
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .main-image-container:hover {
    box-shadow: var(--shadow-lg);
    border-color: var(--primary-hover);
  }

  .main-product-image {
    max-width: 100%;
    max-height: 350px;
    object-fit: contain;
    transition: transform 0.3s ease;
  }

  .main-image-container:hover .main-product-image {
    transform: scale(1.05);
  }

  /* Professional Product Details */
  .product-details {
    padding: 1rem 0;
  }

  .product-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .product-category {
    color: var(--primary-color);
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .product-status {
    display: flex;
    gap: 0.5rem;
  }

  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .status-badge.available {
    background: #dcfce7;
    color: var(--success-color);
  }

  .product-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
    line-height: 1.2;
  }

  .product-description {
    margin-bottom: 2.5rem;
  }

  .product-description p {
    font-size: 1.125rem;
    line-height: 1.7;
    color: var(--text-secondary);
  }

  /* Professional Features */
  .product-highlights {
    margin-bottom: 3rem;
  }

  .highlights-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
  }

  .features-grid {
    display: grid;
    gap: 1rem;
  }

  .feature-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 1rem;
    background: var(--background-secondary);
    border-radius: var(--radius-md);
    border: 1px solid var(--border-color);
  }

  .feature-icon {
    flex-shrink: 0;
    width: 20px;
    height: 20px;
    color: var(--success-color);
    margin-top: 0.125rem;
  }

  .feature-text {
    color: var(--text-secondary);
    line-height: 1.5;
  }

  /* Professional Action Buttons */
  .product-actions {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.5rem;
    border-radius: var(--radius-md);
    font-weight: 600;
    font-size: 0.875rem;
    text-decoration: none;
    border: none;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: box-shadow 0.3s cubic-bezier(0.4,0,0.2,1), transform 0.2s cubic-bezier(0.4,0,0.2,1);
  }

  .btn-primary {
    background: var(--primary-color);
    color: white;
  }

  .btn-primary:hover, .btn-secondary:hover {
    box-shadow: 0 8px 24px 0 rgba(45,212,191,0.18), 0 1.5px 4px 0 rgba(0,0,0,0.08);
    transform: translateY(-2px) scale(1.04);
    transition: box-shadow 0.3s cubic-bezier(0.4,0,0.2,1), transform 0.2s cubic-bezier(0.4,0,0.2,1);
  }

  .btn-secondary {
    background: transparent;
    color: var(--text-secondary);
    border: 1px solid var(--border-color-strong);
  }

  .btn-secondary:hover {
    background: var(--background-secondary);
    border-color: var(--text-secondary);
  }

  .hover-effect {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba(255, 255, 255, 0.5);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%);
    transform-origin: 50% 50%;
    pointer-events: none;
  }

  .btn:hover .hover-effect {
    animation: ripple 600ms ease-out;
  }

  @keyframes ripple {
    0% {
      transform: scale(0, 0);
      opacity: 0.5;
    }
    100% {
      transform: scale(20, 20);
      opacity: 0;
    }
  }

  /* Professional Specifications */
  .specifications-section {
    padding: 5rem 0;
    background: var(--background-secondary);
  }
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    margin-bottom: 3rem;
    gap: 2rem;
  }
  .header-content h2.section-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0 0 0.5rem 0;
  }
  .section-subtitle {
    color: var(--text-secondary);
    font-size: 1rem;
    margin: 0;
  }
  .btn-download {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    background: white;
    color: var(--primary-color);
    border: 1px solid var(--primary-color);
    padding: 0.75rem 1.25rem;
    border-radius: var(--radius-md);
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 160px;
  }
  .btn-download:hover {
    background: var(--primary-color);
    color: white;
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }
  .specifications-container {
    background: white;
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-xl);
    overflow: hidden;
  }
  .specs-content-list {
    padding: 0;
  }
  .spec-category-block {
    border-bottom: 1px solid var(--border-color);
  }
  .spec-category-block:last-child {
    border-bottom: none;
  }
  .category-header {
    padding: 2rem 2rem 1rem 2rem;
    background: linear-gradient(135deg, var(--background-tertiary) 0%, var(--background-secondary) 100%);
    border-bottom: 1px solid var(--border-color);
  }
  .category-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0 0 1rem 0;
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  .category-title::before {
    content: '';
    width: 4px;
    height: 24px;
    background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
    border-radius: 2px;
  }
  .category-divider {
    height: 2px;
    background: linear-gradient(90deg, var(--primary-color) 0%, transparent 100%);
    border-radius: 1px;
  }
  .category-content {
    padding: 2rem;
  }
  .specs-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  .spec-item {
    background: var(--background-secondary);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-md);
    padding: 1.5rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }
  .spec-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: linear-gradient(90deg, var(--primary-color), var(--primary-hover));
    transform: translateX(-100%);
    transition: transform 0.3s ease;
  }
  .spec-item:hover {
    background: white;
    border-color: var(--primary-color);
    box-shadow: var(--shadow-md);
    transform: translateY(-2px);
  }
  .spec-item:hover::before {
    transform: translateX(0);
  }
  .spec-label {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  .spec-label::after {
    content: '';
    flex-grow: 1;
    height: 1px;
    background: var(--border-color);
  }
  .spec-detail {
    font-size: 1rem;
    color: var(--text-secondary);
    line-height: 1.6;
    font-weight: 500;
  }
  @media (min-width: 1024px) {
    .specs-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  @media (min-width: 1280px) {
    .specs-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  @media (max-width: 768px) {
    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.5rem;
    }
    .category-header {
      padding: 1.5rem 1rem 1rem 1rem;
    }
    .category-title {
      font-size: 1.25rem;
    }
    .category-content {
      padding: 1.5rem 1rem;
    }
    .specs-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    .spec-item {
      padding: 1rem;
    }
  }
  @media (max-width: 480px) {
    .specifications-section {
      padding: 3rem 0;
    }
    .section-header h2.section-title {
      font-size: 1.75rem;
    }
    .category-header {
      padding: 1rem;
    }
    .category-title {
      font-size: 1.125rem;
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    .category-content {
      padding: 1rem;
    }
    .spec-item {
      padding: 0.875rem;
    }
    .spec-label {
      font-size: 0.8rem;
    }
    .spec-detail {
      font-size: 0.9rem;
    }
  }
  @media print {
    .btn-download {
      display: none;
    }
    .specifications-section {
      background: white;
    }
    .spec-category-block {
      page-break-inside: avoid;
      margin-bottom: 2rem;
    }
    .category-header {
      background: #f8f9fa !important;
      border: 1px solid #000;
    }
    .spec-item {
      background: white !important;
      border: 1px solid #000;
      break-inside: avoid;
    }
  }

  /* Add loading animation for download button */
  .spin-icon {
    animation: spin 1.5s linear infinite;
  }
  
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Header improvements - make it more compact */
  #header-banner {
    padding: 1rem 0;
  }

  /* Overall layout improvements */
  @media (min-width: 1200px) {
    .container {
      padding: 0 3rem;
    }
    .product-grid {
      gap: 5rem;
    }
  }
</style>