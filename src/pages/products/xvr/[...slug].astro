---
// src/pages/products/switch/[slug].astro
import Layout from "../../../layouts/Layout.astro";
import { getCollection, getEntryBySlug } from "astro:content";

export async function getStaticPaths() {
  const products = await getCollection("xvr");
  return products.map((product) => ({
    params: { slug: product.slug },
    props: { product },
  }));
}

const { slug } = Astro.params;
const { product } = Astro.props;
const productData = product?.data;

const allProducts = await getCollection("xvr");
const relatedProducts = allProducts.filter(p => p.slug !== slug).slice(0, 3);

// Helper function to render specifications
function renderSpecifications(specs) {
  if (!specs) return null;

  const specGroups = [];

  // Video Input
  const videoInputSpecs = [];
  if (specs["Analog Video Input"]) videoInputSpecs.push(['Analog Video Input', specs["Analog Video Input"]]);
  if (specs["IP Video Input"]) videoInputSpecs.push(['IP Video Input', specs["IP Video Input"]]);
  if (specs["AHD input"]) videoInputSpecs.push(['AHD Input', specs["AHD input"]]);
  if (specs["TVI input"]) videoInputSpecs.push(['TVI Input', specs["TVI input"]]);
  if (specs["CVI input"]) videoInputSpecs.push(['CVI Input', specs["CVI input"]]);
  if (specs["CVBS input"]) videoInputSpecs.push(['CVBS Input', specs["CVBS input"]]);
  if (videoInputSpecs.length > 0) {
    specGroups.push({ title: 'Video Input', specs: videoInputSpecs });
  }

  // Audio
  const audioSpecs = [];
  if (specs["Audio Input"]) audioSpecs.push(['Audio Input', specs["Audio Input"]]);
  if (specs["Audio Output"]) audioSpecs.push(['Audio Output', specs["Audio Output"]]);
  if (specs["Audio Compression"]) audioSpecs.push(['Audio Compression', specs["Audio Compression"]]);
  if (specs["Two-way Audio"]) audioSpecs.push(['Two-way Audio', specs["Two-way Audio"]]);
  if (audioSpecs.length > 0) {
    specGroups.push({ title: 'Audio', specs: audioSpecs });
  }

  // Video Output
  const videoOutputSpecs = [];
  if (specs["VGA Output"]) videoOutputSpecs.push(['VGA Output', specs["VGA Output"]]);
  if (specs["HDMI Output"]) videoOutputSpecs.push(['HDMI Output', specs["HDMI Output"]]);
  if (specs["Live view display"]) videoOutputSpecs.push(['Live View Display', specs["Live view display"]]);
  if (specs["Synchronous Playback"]) videoOutputSpecs.push(['Synchronous Playback', specs["Synchronous Playback"]]);
  if (videoOutputSpecs.length > 0) {
    specGroups.push({ title: 'Video Output', specs: videoOutputSpecs });
  }

  // Network
  const networkSpecs = [];
  if (specs["Incoming Bandwidth"]) networkSpecs.push(['Incoming Bandwidth', specs["Incoming Bandwidth"]]);
  if (specs["Outgoing Bandwidth"]) networkSpecs.push(['Outgoing Bandwidth', specs["Outgoing Bandwidth"]]);
  if (specs["Remote Users"]) networkSpecs.push(['Remote Users', specs["Remote Users"]]);
  if (specs["Protocols"]) networkSpecs.push(['Protocols', specs["Protocols"]]);
  if (specs["Browser"]) networkSpecs.push(['Browser', specs["Browser"]]);
  if (specs["Network Interface"]) networkSpecs.push(['Network Interface', specs["Network Interface"]]);
  if (networkSpecs.length > 0) {
    specGroups.push({ title: 'Network', specs: networkSpecs });
  }

  // Storage
  const storageSpecs = [];
  if (specs["SATA"]) storageSpecs.push(['SATA', specs["SATA"]]);
  if (specs["Capacity"]) storageSpecs.push(['Capacity', specs["Capacity"]]);
  if (storageSpecs.length > 0) {
    specGroups.push({ title: 'Storage', specs: storageSpecs });
  }

  // Recording & Playback
  const recordingSpecs = [];
  if (specs["Recording Resolution"]) recordingSpecs.push(['Recording Resolution', specs["Recording Resolution"]]);
  if (specs["Capability"]) recordingSpecs.push(['Capability', specs["Capability"]]);
  if (specs["FTP/Schedule/Event Snapshot"]) recordingSpecs.push(['FTP/Schedule/Event Snapshot', specs["FTP/Schedule/Event Snapshot"]]);
  if (recordingSpecs.length > 0) {
    specGroups.push({ title: 'Recording & Playback', specs: recordingSpecs });
  }

  // Alarm & VCA
  const alarmSpecs = [];
  if (specs["VCA Detection"]) alarmSpecs.push(['VCA Detection', specs["VCA Detection"]]);
  if (specs["VCA Search"]) alarmSpecs.push(['VCA Search', specs["VCA Search"]]);
  if (specs["General Alarm"]) alarmSpecs.push(['General Alarm', specs["General Alarm"]]);
  if (specs["Alert Alarm"]) alarmSpecs.push(['Alert Alarm', specs["Alert Alarm"]]);
  if (alarmSpecs.length > 0) {
    specGroups.push({ title: 'Alarm & VCA', specs: alarmSpecs });
  }

  // Interfaces
  const interfaceSpecs = [];
  if (specs["USB Interface"]) interfaceSpecs.push(['USB Interface', specs["USB Interface"]]);
  if (specs["Serial Interface"]) interfaceSpecs.push(['Serial Interface', specs["Serial Interface"]]);
  if (interfaceSpecs.length > 0) {
    specGroups.push({ title: 'Interfaces', specs: interfaceSpecs });
  }

  // Power & Environment
  const powerEnvSpecs = [];
  if (specs["Power Supply"]) powerEnvSpecs.push(['Power Supply', specs["Power Supply"]]);
  if (specs["Power Consumption"]) powerEnvSpecs.push(['Power Consumption', specs["Power Consumption"]]);
  if (specs["Working Environment"]) powerEnvSpecs.push(['Working Environment', specs["Working Environment"]]);
  if (powerEnvSpecs.length > 0) {
    specGroups.push({ title: 'Power & Environment', specs: powerEnvSpecs });
  }

  // Physical
  const physicalSpecs = [];
  if (specs["Dimensions"]) physicalSpecs.push(['Dimensions', specs["Dimensions"]]);
  if (specs["Weight"]) physicalSpecs.push(['Weight', specs["Weight"]]);
  if (specs["Certification"]) physicalSpecs.push(['Certification', specs["Certification"]]);
  if (physicalSpecs.length > 0) {
    specGroups.push({ title: 'Physical', specs: physicalSpecs });
  }

  return specGroups;
}

const specificationGroups = renderSpecifications(productData?.specifications);
---

<Layout>
  <!-- Professional Header Banner - Add animation classes -->
  <section 
    id="header-banner"
    class="bg-gradient-to-r from-teal-900/80 to-transparent opacity-0 translate-y-10 transition-all duration-500 ease-out"
  >
    <!-- ...existing header content... -->
    <div class="header-overlay"></div>
    <div class="container">
      <nav class="breadcrumbs">
        <!-- ...existing breadcrumb code... -->
        <a href="/" class="breadcrumb-link">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
            <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
          </svg>
          Home
        </a>
        <span class="breadcrumb-separator">/</span>
        <a href="/products" class="breadcrumb-link">Products</a>
        <span class="breadcrumb-separator">/</span>
        <a href="/products/xvr" class="breadcrumb-link">XVR</a>
        <span class="breadcrumb-separator">/</span>
        <span class="breadcrumb-current">{productData?.title}</span>
      </nav>
    </div>
  </section>

  <!-- Product Overview Section - Add animation classes -->
  <section 
    id="product-overview"
    class="product-overview opacity-0 translate-y-10 transition-all duration-500 ease-out delay-100"
  >
    <!-- ...existing product overview content... -->
    <div class="container">
      <div class="product-grid">
        <!-- Product Gallery -->
        <div class="product-gallery">
          <div class="gallery-main">
            {productData?.images?.length ? (
              <div class="main-image-container">
                <img 
                  id="mainProductImage"
                  src={productData.images[0].url} 
                  alt={productData.images[0].caption || productData.title} 
                  class="main-product-image"
                />
                <div class="image-zoom-indicator">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                  </svg>
                </div>
              </div>
            ) : productData?.image ? (
              <div class="main-image-container">
                <img 
                  id="mainProductImage"
                  src={productData.image} 
                  alt={productData.title} 
                  class="main-product-image"
                />
              </div>
            ) : (
              <div class="main-image-container">
                <img 
                  id="mainProductImage"
                  src="/images/placeholder-camera.jpg" 
                  alt={productData?.title || "Product Image"} 
                  class="main-product-image"
                />
              </div>
            )}
          </div>
          
          {(productData?.images?.length > 1) && (
            <div class="gallery-thumbnails">
              {productData.images.map((image, index) => (
                <button 
                  class={`thumbnail-btn ${index === 0 ? 'active' : ''}`}
                  onclick={`changeMainImage(${index})`}
                  data-index={index}
                >
                  <img 
                    src={image.url} 
                    alt={image.caption || `${productData.title} - View ${index + 1}`} 
                  />
                </button>
              ))}
            </div>
          )}
        </div>

        <!-- Product Information -->
        <div class="product-details">
          <div class="product-meta">
            <span class="product-category">Network Switch</span>
            <div class="product-status">
              <span class="status-badge available">In Stock</span>
            </div>
          </div>
          
          <h1 class="product-title">{productData?.title}</h1>
          
          {productData?.description && (
            <div class="product-description">
              <p>{productData.description}</p>
            </div>
          )}

          {productData?.features?.length > 0 && (
            <div class="product-highlights">
              <h3 class="highlights-title">Key Features</h3>
              <div class="features-grid">
                {productData.features.map((feature, index) => (
                  <div class="feature-item">
                    <div class="feature-icon">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                      </svg>
                    </div>
                    <span class="feature-text">{feature}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div class="product-actions">
            <button class="btn btn-primary">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
              </svg>
              Request Quote
              <span class="hover-effect"></span>
            </button>
            <button class="btn btn-secondary">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
              Add to Favorites
              <span class="hover-effect"></span>
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Technical Specifications - Add animation classes -->
  {specificationGroups && specificationGroups.length > 0 && (
    <section 
      id="specifications"
      class="specifications-section opacity-0 translate-y-10 transition-all duration-500 ease-out delay-200"
    >
      <!-- ...existing specifications content... -->
      <div class="container">
        <div class="section-header">
          <div class="header-content">
            <h2 class="section-title">Technical Specifications</h2>
            <p class="section-subtitle">Detailed technical information and performance metrics</p>
          </div>
          <div class="header-actions">
            <button class="btn-download" onclick="downloadSpecifications()">
              <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
                <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
              </svg>
              Download PDF
            </button>
          </div>
        </div>

        <div class="specifications-container">
          <div class="specs-navigation">
            <div class="nav-tabs">
              {specificationGroups.map((group, index) => (
                <button 
                  class={`nav-tab ${index === 0 ? 'active' : ''}`}
                  onclick={`showSpecGroup(${index})`}
                  data-tab={index}
                >
                  {group.title}
                </button>
              ))}
            </div>
          </div>

          <div class="specs-content">
            {specificationGroups.map((group, groupIndex) => (
              <div 
                class={`spec-group ${groupIndex === 0 ? 'active' : ''}`}
                data-group={groupIndex}
              >
                <div class="spec-table-container">
                  <table class="spec-table">
                    <thead>
                      <tr>
                        <th class="spec-parameter">Parameter</th>
                        <th class="spec-value-header">Specification</th>
                      </tr>
                    </thead>
                    <tbody>
                      {group.specs.map(([key, value]) => (
                        <tr class="spec-row">
                          <td class="spec-name">{key}</td>
                          <td class="spec-value">{value}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )}

  <!-- Related Products - Add animation classes -->
  
</Layout>
<style>
  /* CSS Variables for Professional Theme */
  :root {
    --primary-color: #2dd4bf; /* teal-400 */
    --primary-hover: #14b8a6; /* teal-500 */
    --secondary-color: #6b7280;
    --success-color: #059669;
    --background-primary: #ffffff;
    --background-secondary: #f8fafc;
    --background-tertiary: #f1f5f9;
    --text-primary: #1f2937;
    --text-secondary: #4b5563;
    --text-muted: #6b7280;
    --border-color: #e5e7eb;
    --border-color-strong: #d1d5db;
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
    --radius-sm: 6px;
    --radius-md: 8px;
    --radius-lg: 12px;
  }

  /* Base Styles */
  * {
    box-sizing: border-box;
  }

  .container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* Professional Header */
  
  .header-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><g fill="%23ffffff" fill-opacity="0.03"><circle cx="30" cy="30" r="2"/></g></g></svg>');
    opacity: 0.3;
  }

  .breadcrumbs {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 0.875rem;
    position: relative;
    z-index: 1;
  }

  .breadcrumb-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
  }

  .breadcrumb-link:hover {
    color: white;
  }

  .breadcrumb-separator {
    color: rgba(255, 255, 255, 0.6);
  }

  .breadcrumb-current {
    color: white;
    font-weight: 500;
  }

  /* Product Overview */
  .product-overview {
    padding: 4rem 0;
    background: var(--background-primary);
  }

  .product-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: start;
  }

  /* Professional Gallery */
  .product-gallery {
    position: sticky;
    top: 2rem;
  }

  .gallery-main {
    margin-bottom: 1.5rem;
  }

  .main-image-container {
    position: relative;
    background: var(--background-secondary);
    border-radius: var(--radius-lg);
    padding: 2rem;
    min-height: 400px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid var(--border-color);
    overflow: hidden;
  }

  .main-product-image {
    max-width: 100%;
    max-height: 350px;
    object-fit: contain;
  }

  .image-zoom-indicator {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 0.5rem;
    border-radius: var(--radius-sm);
  }

  .gallery-thumbnails {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .thumbnail-btn {
    width: 80px;
    height: 80px;
    border: 2px solid var(--border-color);
    border-radius: var(--radius-md);
    padding: 0.5rem;
    background: var(--background-secondary);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .thumbnail-btn:hover,
  .thumbnail-btn.active {
    border-color: var(--primary-color);
    box-shadow: var(--shadow-md);
  }

  .thumbnail-btn img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }

  /* Professional Product Details */
  .product-details {
    padding: 1rem 0;
  }

  .product-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .product-category {
    color: var(--primary-color);
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .product-status {
    display: flex;
    gap: 0.5rem;
  }

  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .status-badge.available {
    background: #dcfce7;
    color: var(--success-color);
  }

  .product-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
    line-height: 1.2;
  }

  .product-description {
    margin-bottom: 2.5rem;
  }

  .product-description p {
    font-size: 1.125rem;
    line-height: 1.7;
    color: var(--text-secondary);
  }

  /* Professional Features */
  .product-highlights {
    margin-bottom: 3rem;
  }

  .highlights-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
  }

  .features-grid {
    display: grid;
    gap: 1rem;
  }

  .feature-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 1rem;
    background: var(--background-secondary);
    border-radius: var(--radius-md);
    border: 1px solid var(--border-color);
  }

  .feature-icon {
    flex-shrink: 0;
    width: 20px;
    height: 20px;
    color: var(--success-color);
    margin-top: 0.125rem;
  }

  .feature-text {
    color: var(--text-secondary);
    line-height: 1.5;
  }

  /* Professional Action Buttons */
  .product-actions {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.5rem;
    border-radius: var(--radius-md);
    font-weight: 600;
    font-size: 0.875rem;
    text-decoration: none;
    border: none;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: box-shadow 0.3s cubic-bezier(0.4,0,0.2,1), transform 0.2s cubic-bezier(0.4,0,0.2,1);
  }

  .btn-primary {
    background: var(--primary-color);
    color: white;
  }

  .btn-primary:hover, .btn-secondary:hover {
    box-shadow: 0 8px 24px 0 rgba(45,212,191,0.18), 0 1.5px 4px 0 rgba(0,0,0,0.08);
    transform: translateY(-2px) scale(1.04);
    transition: box-shadow 0.3s cubic-bezier(0.4,0,0.2,1), transform 0.2s cubic-bezier(0.4,0,0.2,1);
  }

  .btn-secondary {
    background: transparent;
    color: var(--text-secondary);
    border: 1px solid var(--border-color-strong);
  }

  .btn-secondary:hover {
    background: var(--background-secondary);
    border-color: var(--text-secondary);
  }

  .hover-effect {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba(255, 255, 255, 0.5);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%);
    transform-origin: 50% 50%;
    pointer-events: none;
  }

  .btn:hover .hover-effect {
    animation: ripple 600ms ease-out;
  }

  @keyframes ripple {
    0% {
      transform: scale(0, 0);
      opacity: 0.5;
    }
    100% {
      transform: scale(20, 20);
      opacity: 0;
    }
  }

  /* Professional Specifications */
  .specifications-section {
    padding: 5rem 0;
    background: var(--background-secondary);
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    margin-bottom: 3rem;
    gap: 2rem;
  }

  .header-content h2.section-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0 0 0.5rem 0;
  }

  .section-subtitle {
    color: var(--text-secondary);
    font-size: 1rem;
    margin: 0;
  }

  .btn-download {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: white;
    color: var(--primary-color);
    border: 1px solid var(--primary-color);
    padding: 0.75rem 1.25rem;
    border-radius: var(--radius-md);
    font-weight: 600;
    cursor: pointer;
  }

  .btn-download:hover {
    background: var(--primary-color);
    color: white;
  }

  .specifications-container {
    background: white;
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-xl);
    overflow: hidden;
  }

  .specs-navigation {
    border-bottom: 1px solid var(--border-color);
    background: var(--background-tertiary);
  }

  .nav-tabs {
    display: flex;
    overflow-x: auto;
    padding: 0 1rem;
  }

  .nav-tab {
    padding: 1rem 1.5rem;
    background: none;
    border: none;
    color: var(--text-secondary);
    font-weight: 500;
    cursor: pointer;
    white-space: nowrap;
    border-bottom: 3px solid transparent;
  }

  .nav-tab:hover {
    color: var(--primary-color);
    background: rgba(45, 212, 191, 0.05); /* teal-400 with opacity */
  }

  .nav-tab.active {
    color: var(--primary-color);
    border-bottom-color: var(--primary-color);
    background: white;
  }

  .specs-content {
    position: relative;
  }

  .spec-group {
    display: none;
    padding: 2rem;
  }

  .spec-group.active {
    display: block;
  }

  .spec-table-container {
    overflow-x: auto;
  }

  .spec-table {
    width: 100%;
    border-collapse: collapse;
  }

  .spec-table th {
    background: var(--background-tertiary);
    color: var(--text-primary);
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    border-bottom: 2px solid var(--border-color-strong);
  }

  .spec-parameter {
    width: 40%;
  }

  .spec-value-header {
    width: 60%;
  }

  .spec-row {
    border-bottom: 1px solid var(--border-color);
  }

  .spec-row:hover {
    background: var(--background-secondary);
  }

  .spec-name {
    padding: 1rem;
    font-weight: 500;
    color: var(--text-primary);
    background: var(--background-tertiary);
    width: 40%;
  }

  .spec-value {
    padding: 1rem;
    color: var(--text-secondary);
    width: 60%;
    line-height: 1.6;
  }

  /* Professional Related Products */
  .related-products {
    padding: 5rem 0;
    background: var(--background-primary);
  }

  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 2rem;
  }

  .product-card {
    background: white;
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: var(--shadow-md);
    border: 1px solid var(--border-color);
  }

  .product-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .product-image {
    position: relative;
    height: 240px;
    background: var(--background-secondary);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    overflow: hidden;
  }

  .product-image img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }

  .product-overlay {
    position: absolute;
    inset: 0;
    background: rgba(30, 64, 175, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
  }

  .product-card:hover .product-overlay {
    opacity: 1;
  }

  .view-details {
    color: white;
    font-weight: 600;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .product-info {
    padding: 1.5rem;
  }

  .product-name {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 0.75rem 0;
    line-height: 1.3;
  }

  .product-summary {
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0 0 1.5rem 0;
    font-size: 0.875rem;
  }

  .product-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .learn-more {
    color: var(--primary-color);
    font-weight: 600;
    font-size: 0.875rem;
  }

  .product-card:hover .learn-more {
    color: var(--primary-hover);
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .container {
      padding: 0 1.5rem;
    }

    .product-grid {
      gap: 3rem;
    }

    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.5rem;
    }

    .nav-tabs {
      padding: 0;
    }

    .spec-table th,
    .spec-name,
    .spec-value {
      padding: 0.75rem;
    }
  }

  @media (max-width: 768px) {
    .product-header {
      padding: 1.5rem 0;
    }

    .breadcrumbs {
      font-size: 0.75rem;
      flex-wrap: wrap;
    }

    .product-overview {
      padding: 3rem 0;
    }

    .product-grid {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .product-gallery {
      position: static;
    }

    .product-title {
      font-size: 2rem;
    }

    .product-actions {
      flex-direction: column;
    }

    .btn {
      justify-content: center;
    }

    .specifications-section,
    .related-products {
      padding: 3rem 0;
    }

    .section-header h2.section-title {
      font-size: 1.75rem;
    }

    .nav-tabs {
      flex-wrap: wrap;
    }

    .nav-tab {
      padding: 0.75rem 1rem;
      font-size: 0.875rem;
    }

    .spec-group {
      padding: 1rem;
    }

    .spec-table th,
    .spec-name,
    .spec-value {
      padding: 0.5rem 0.75rem;
      font-size: 0.875rem;
    }

    .products-grid {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 480px) {
    .container {
      padding: 0 1rem;
    }

    .product-header {
      padding: 1rem 0;
    }

    .main-image-container {
      padding: 1rem;
      min-height: 300px;
    }

    .gallery-thumbnails {
      gap: 0.5rem;
    }

    .thumbnail-btn {
      width: 60px;
      height: 60px;
    }

    .product-title {
      font-size: 1.75rem;
    }

    .features-grid {
      gap: 0.75rem;
    }

    .feature-item {
      padding: 0.75rem;
    }

    .spec-table-container {
      font-size: 0.75rem;
    }

    .spec-name {
      width: 45%;
    }

    .spec-value {
      width: 55%;
    }
  }

  /* Print Styles */
  @media print {
    .product-header,
    .product-actions,
    .btn-download,
    .nav-tabs,
    .related-products {
      display: none;
    }

    .specifications-section {
      background: white;
    }

    .spec-group {
      display: block !important;
      page-break-inside: avoid;
    }

    .spec-table {
      border: 1px solid #000;
    }

    .spec-table th,
    .spec-name,
    .spec-value {
      border: 1px solid #000;
      background: white !important;
    }
  }

  .animate-in {
    opacity: 1 !important;
    transform: translateY(0) !important;
  }
  .product-card:nth-child(1) { transition-delay: 100ms !important; }
  .product-card:nth-child(2) { transition-delay: 200ms !important; }
  .product-card:nth-child(3) { transition-delay: 300ms !important; }
  [class*="transition-all"] {
    will-change: transform, opacity;
  }
  #page-loader {
    transition: opacity 0.3s ease-out;
  }
  #page-loader.hidden {
    opacity: 0;
    pointer-events: none;
  }
</style>

<script is:inline>
  // Enhanced page load and scroll animations
  document.addEventListener('DOMContentLoaded', () => {
    // Hide loader when page is ready
    setTimeout(() => {
      const loader = document.getElementById('page-loader');
      if (loader) loader.classList.add('hidden');
      // Trigger initial animations
      animateOnScroll();
      // Remove loader after transition ends to prevent interaction
      loader && loader.addEventListener('transitionend', () => {
        loader.style.display = 'none';
      });
    }, 300);

    // Intersection Observer for smooth scroll animations
    function animateOnScroll() {
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -100px 0px'
      };
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-in');
            observer.unobserve(entry.target);
          }
        });
      }, observerOptions);

      // Observe all animated sections
      const animatedSections = [
        document.getElementById('header-banner'),
        document.getElementById('product-overview'),
        document.getElementById('specifications'),
        document.getElementById('related-products')
      ];
      animatedSections.forEach(section => {
        if (section) observer.observe(section);
      });

      // Observe individual product cards for staggered animation
      const productCards = document.querySelectorAll('.product-card');
      productCards.forEach((card) => {
        observer.observe(card);
      });
    }

    // Initialize other functionality
    // Gallery
    function changeMainImage(index) {
      const mainImage = document.getElementById('mainProductImage');
      const thumbnails = document.querySelectorAll('.thumbnail-btn');
      const thumbnailImages = document.querySelectorAll('.thumbnail-btn img');
      if (mainImage && thumbnailImages[index]) {
        mainImage.src = thumbnailImages[index].src;
        mainImage.alt = thumbnailImages[index].alt;
        thumbnails.forEach((thumb, i) => {
          thumb.classList.toggle('active', i === index);
        });
      }
    }
    window.changeMainImage = changeMainImage;

    // Download Specifications
    function downloadSpecifications() {
      const productTitle = document.querySelector('.product-title')?.textContent || 'Product';
      const specificationGroups = document.querySelectorAll('.spec-group');
      if (specificationGroups.length === 0) return;
      let csv = `Product Specifications - ${productTitle}\n`;
      csv += `Generated on: ${new Date().toLocaleDateString()}\n`;
      csv += `Time: ${new Date().toLocaleTimeString()}\n\n`;
      specificationGroups.forEach((group, groupIndex) => {
        const table = group.querySelector('.spec-table');
        if (!table) return;
        const navTabs = document.querySelectorAll('.nav-tab');
        const sectionTitle = navTabs[groupIndex]?.textContent.trim() || `Section ${groupIndex + 1}`;
        csv += `\n=== ${sectionTitle.toUpperCase()} ===\n`;
        const rows = table.querySelectorAll('tr');
        rows.forEach(row => {
          const cells = row.querySelectorAll('th, td');
          const rowData = Array.from(cells).map(cell => {
            let text = cell.textContent.trim();
            text = text.replace(/\s+/g, ' ');
            if (text.includes(',') || text.includes('"') || text.includes('\n')) {
              text = '"' + text.replace(/"/g, '""') + '"';
            }
            return text;
          });
          if (rowData.some(cell => cell.length > 0)) {
            csv += rowData.join(',') + '\n';
          }
        });
        csv += '\n';
      });
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      const filename = `${productTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_complete_specifications.csv`;
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }
    window.downloadSpecifications = downloadSpecifications;

    // Tab switching
    function showSpecGroup(index) {
      const tabs = document.querySelectorAll('.nav-tab');
      const groups = document.querySelectorAll('.spec-group');
      tabs.forEach((tab, i) => {
        tab.classList.toggle('active', i === index);
      });
      groups.forEach((group, i) => {
        group.classList.toggle('active', i === index);
      });
    }
    window.showSpecGroup = showSpecGroup;

    // Initialize first thumbnail/tab/group on DOMContentLoaded
    const firstThumbnail = document.querySelector('.thumbnail-btn');
    if (firstThumbnail) firstThumbnail.classList.add('active');
    const firstTab = document.querySelector('.nav-tab');
    const firstGroup = document.querySelector('.spec-group');
    if (firstTab && firstGroup) {
      firstTab.classList.add('active');
      firstGroup.classList.add('active');
    }
  });
</script>