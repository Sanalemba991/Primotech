---
// src/pages/products/switch/[slug].astro
import Layout from "../../../layouts/Layout.astro";
import { getCollection, getEntryBySlug } from "astro:content";

export async function getStaticPaths() {
  const products = await getCollection("analog");
  return products.map((product) => ({
    params: { slug: product.slug },
    props: { product },
  }));
}

const { slug } = Astro.params;
const { product } = Astro.props;
const productData = product?.data;

const allProducts = await getCollection("analog");
const relatedProducts = allProducts.filter(p => p.slug !== slug).slice(0, 3);

// Helper function to render specifications
function renderSpecifications(specs) {
  if (!specs) return [];

  const specGroups = [];

  // Image Sensor
  const imageSensorSpecs = [];
  if (specs["Pixel"]) imageSensorSpecs.push(["Pixel", specs["Pixel"]]);
  if (specs["Size"]) imageSensorSpecs.push(["Size", specs["Size"]]);
  if (specs["Minimum illumination"]) imageSensorSpecs.push(["Minimum illumination", specs["Minimum illumination"]]);
  if (imageSensorSpecs.length > 0) {
    specGroups.push({ title: 'Image Sensor', specs: imageSensorSpecs });
  }

  // Lens
  const lensSpecs = [];
  if (specs["Lens"]) lensSpecs.push(["Lens", specs["Lens"]]);
  if (specs["Lens mount"]) lensSpecs.push(["Lens mount", specs["Lens mount"]]);
  if (specs["Angle of view"]) {
    const angle = specs["Angle of view"];
    if (angle["2.8mm"]) lensSpecs.push(["Angle of view (2.8mm)", angle["2.8mm"]]);
    if (angle["4.0mm"]) lensSpecs.push(["Angle of view (4.0mm)", angle["4.0mm"]]);
  }
  if (lensSpecs.length > 0) {
    specGroups.push({ title: 'Lens', specs: lensSpecs });
  }

  // IR/Illumination
  const irSpecs = [];
  if (specs["Illumination distance"]) irSpecs.push(["Illumination distance", specs["Illumination distance"]]);
  if (specs["Lifetime"]) irSpecs.push(["Lifetime", specs["Lifetime"]]);
  if (irSpecs.length > 0) {
    specGroups.push({ title: 'IR/Illumination', specs: irSpecs });
  }

  // Video
  const videoSpecs = [];
  if (specs["Resolution"]) {
    const res = specs["Resolution"];
    if (res["5MP@25fps"]) videoSpecs.push(["Resolution (5MP@25fps)", res["5MP@25fps"]]);
    if (res["5MP@20fps"]) videoSpecs.push(["Resolution (5MP@20fps)", res["5MP@20fps"]]);
    if (res["5MP@12.5fps"]) videoSpecs.push(["Resolution (5MP@12.5fps)", res["5MP@12.5fps"]]);
    if (res["4MP"]) videoSpecs.push(["Resolution (4MP)", res["4MP"]]);
    if (res["1080P"]) videoSpecs.push(["Resolution (1080P)", res["1080P"]]);
  }
  if (specs["Video output"]) videoSpecs.push(["Video output", specs["Video output"]]);
  if (videoSpecs.length > 0) {
    specGroups.push({ title: 'Video', specs: videoSpecs });
  }

  // Video Formats
  const videoFormatSpecs = [];
  if (specs["Video Formats"]) {
    const vf = specs["Video Formats"];
    if (vf["TVI"]) videoFormatSpecs.push(["TVI", vf["TVI"]]);
    if (vf["AHD"]) videoFormatSpecs.push(["AHD", vf["AHD"]]);
    if (vf["CVI"]) videoFormatSpecs.push(["CVI", vf["CVI"]]);
    if (vf["CVBS"]) videoFormatSpecs.push(["CVBS", vf["CVBS"]]);
  }
  if (videoFormatSpecs.length > 0) {
    specGroups.push({ title: 'Video Formats', specs: videoFormatSpecs });
  }

  // Exposure
  const exposureSpecs = [];
  if (specs["Shutter time"]) exposureSpecs.push(["Shutter time", specs["Shutter time"]]);
  if (specs["Exposure mode"]) exposureSpecs.push(["Exposure mode", specs["Exposure mode"]]);
  if (exposureSpecs.length > 0) {
    specGroups.push({ title: 'Exposure', specs: exposureSpecs });
  }

  // Day/Night
  const dayNightSpecs = [];
  if (specs["Day/Night"]) dayNightSpecs.push(["Day/Night", specs["Day/Night"]]);
  if (specs["Digital noise reduction"]) dayNightSpecs.push(["Digital noise reduction", specs["Digital noise reduction"]]);
  if (dayNightSpecs.length > 0) {
    specGroups.push({ title: 'Day/Night', specs: dayNightSpecs });
  }

  // Image
  const imageSpecs = [];
  if (specs["White balance"]) imageSpecs.push(["White balance", specs["White balance"]]);
  if (specs["WDR"]) imageSpecs.push(["WDR", specs["WDR"]]);
  if (specs["Flip"]) imageSpecs.push(["Flip", specs["Flip"]]);
  if (imageSpecs.length > 0) {
    specGroups.push({ title: 'Image', specs: imageSpecs });
  }

  // Power
  const powerSpecs = [];
  if (specs["Power Interface"]) powerSpecs.push(["Power Interface", specs["Power Interface"]]);
  if (specs["Power"]) powerSpecs.push(["Power", specs["Power"]]);
  if (powerSpecs.length > 0) {
    specGroups.push({ title: 'Power', specs: powerSpecs });
  }

  // Output
  const outputSpecs = [];
  if (specs["Mount"]) outputSpecs.push(["Mount", specs["Mount"]]);
  if (outputSpecs.length > 0) {
    specGroups.push({ title: 'Output', specs: outputSpecs });
  }

  // Environment
  const envSpecs = [];
  if (specs["Temperature"]) envSpecs.push(["Temperature", specs["Temperature"]]);
  if (specs["Humidity"]) envSpecs.push(["Humidity", specs["Humidity"]]);
  if (specs["Surge protection"]) envSpecs.push(["Surge protection", specs["Surge protection"]]);
  if (envSpecs.length > 0) {
    specGroups.push({ title: 'Environment', specs: envSpecs });
  }

  // Physical
  const physicalSpecs = [];
  if (specs["Dimensions"]) physicalSpecs.push(["Dimensions", specs["Dimensions"]]);
  if (specs["Material"]) physicalSpecs.push(["Material", specs["Material"]]);
  if (specs["Weight"]) physicalSpecs.push(["Weight", specs["Weight"]]);
  if (physicalSpecs.length > 0) {
    specGroups.push({ title: 'Physical', specs: physicalSpecs });
  }

  // OSD
  const osdSpecs = [];
  if (specs["OSD menu language"]) osdSpecs.push(["OSD menu language", specs["OSD menu language"]]);
  if (osdSpecs.length > 0) {
    specGroups.push({ title: 'OSD', specs: osdSpecs });
  }

  // Certifications
  const certSpecs = [];
  if (specs["Certifications"]) {
    const cert = specs["Certifications"];
    if (cert["EMC"]) certSpecs.push(["EMC", cert["EMC"]]);
    if (cert["Safety"]) certSpecs.push(["Safety", cert["Safety"]]);
    if (cert["Environment"]) certSpecs.push(["Environment", cert["Environment"]]);
    if (cert["Protection"]) certSpecs.push(["Protection", cert["Protection"]]);
  }
  if (certSpecs.length > 0) {
    specGroups.push({ title: 'Certifications', specs: certSpecs });
  }

  return specGroups;
}

const specificationGroups = renderSpecifications(productData?.specifications);
---

<Layout>
  <!-- Professional Header Banner - Cleaned: removed animation classes -->
  <section 
    id="header-banner"
    class="bg-gradient-to-r from-teal-900/80 to-transparent"
  >
    <!-- ...existing header content... -->
    <div class="header-overlay"></div>
    <div class="container">
      <nav class="breadcrumbs">
        <!-- ...existing breadcrumb code... -->
        <a href="/" class="breadcrumb-link">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
            <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
          </svg>
          Home
        </a>
        <span class="breadcrumb-separator">/</span>
        <a href="/products" class="breadcrumb-link">Products</a>
        <span class="breadcrumb-separator">/</span>
        <a href="/products/analog" class="breadcrumb-link">Analog Fixed-lens Cameras</a>
        <span class="breadcrumb-separator">/</span>
        <span class="breadcrumb-current">{productData?.title}</span>
      </nav>
    </div>
  </section>

  <!-- Product Overview Section - Cleaned: removed animation classes -->
  <section 
    id="product-overview"
    class="product-overview"
  >
    <!-- ...existing product overview content... -->
    <div class="container">
      <div class="product-grid">
        <!-- Product Gallery -->
        <div class="product-gallery">
          <div class="gallery-main">
            {productData?.images?.length ? (
              <div class="main-image-container">
                <img 
                  id="mainProductImage"
                  src={productData.images[0].url} 
                  alt={productData.images[0].caption || productData.title} 
                  class="main-product-image"
                />
                <div class="image-zoom-indicator">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                  </svg>
                </div>
              </div>
            ) : productData?.image ? (
              <div class="main-image-container">
                <img 
                  id="mainProductImage"
                  src={productData.image} 
                  alt={productData.title} 
                  class="main-product-image"
                />
              </div>
            ) : (
              <div class="main-image-container">
                <img 
                  id="mainProductImage"
                  src="/images/placeholder-camera.jpg" 
                  alt={productData?.title || "Product Image"} 
                  class="main-product-image"
                />
              </div>
            )}
          </div>
          
          {(productData?.images?.length > 1) && (
            <div class="gallery-thumbnails">
              {productData.images.map((image, index) => (
                <button 
                  class={`thumbnail-btn ${index === 0 ? 'active' : ''}`}
                  onclick={`changeMainImage(${index})`}
                  data-index={index}
                >
                  <img 
                    src={image.url} 
                    alt={image.caption || `${productData.title} - View ${index + 1}`} 
                  />
                </button>
              ))}
            </div>
          )}
        </div>

        <!-- Product Information -->
        <div class="product-details">
          <div class="product-meta">
            <span class="product-category">Analog Fixed-lens Cameras</span>
            <div class="product-status">
              <span class="status-badge available">In Stock</span>
            </div>
          </div>
          
          <h1 class="product-title">{productData?.title}</h1>
          
          {productData?.description && (
            <div class="product-description">
              <p>{productData.description}</p>
            </div>
          )}

          {productData?.features?.length > 0 && (
            <div class="product-highlights">
              <h3 class="highlights-title">Key Features</h3>
              <div class="features-grid">
                {productData.features.map((feature, index) => (
                  <div class="feature-item">
                    <div class="feature-icon">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                      </svg>
                    </div>
                    <span class="feature-text">{feature}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div class="product-actions">
            <button class="btn btn-primary">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
              </svg>
              Request Quote
              <span class="hover-effect"></span>
            </button>
            <button class="btn btn-secondary">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
              Add to Favorites
              <span class="hover-effect"></span>
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Technical Specifications - Cleaned: removed animation classes -->
  {specificationGroups && specificationGroups.length > 0 && (
    <section 
      id="specifications"
      class="specifications-section"
    >
      <div class="container">
        <div class="section-header">
          <div class="header-content">
            <h2 class="section-title">Technical Specifications</h2>
            <p class="section-subtitle">Detailed technical information and performance metrics</p>
          </div>
          <div class="header-actions">
            <button class="btn-download" onclick="downloadPageAsImage()">
              <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
                <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
              </svg>
              Download Image
            </button>
          </div>
        </div>

        <div class="specifications-container">
          <div class="specs-content-list">
            {specificationGroups.map((group, groupIndex) => (
              <div class="spec-category-block">
                <div class="category-header">
                  <h3 class="category-title">{group.title}</h3>
                  <div class="category-divider"></div>
                </div>
                
                <div class="category-content">
                  <div class="specs-grid">
                    {group.specs.map(([key, value]) => (
                      <div class="spec-item">
                        <div class="spec-label">{key}</div>
                        <div class="spec-detail">{value}</div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )}

  <!-- Related Products - Cleaned: removed animation classes -->
  
</Layout>
<!-- html2canvas CDN for client-side screenshot -->
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    // Gallery
    function changeMainImage(index) {
      var mainImage = document.getElementById('mainProductImage');
      var thumbnails = document.querySelectorAll('.thumbnail-btn');
      var thumbnailImages = document.querySelectorAll('.thumbnail-btn img');
      if (mainImage && thumbnailImages[index]) {
        mainImage.src = thumbnailImages[index].src;
        mainImage.alt = thumbnailImages[index].alt;
        thumbnails.forEach(function(thumb, i) {
          thumb.classList.toggle('active', i === index);
        });
      }
    }
    window.changeMainImage = changeMainImage;

    // Download Specifications (use var for compatibility)
    function downloadSpecifications() {
      var productTitle = document.querySelector('.product-title')?.textContent || 'Product';
      var categoryBlocks = document.querySelectorAll('.spec-category-block');
      if (categoryBlocks.length === 0) return;
      var csv = `Product Specifications - ${productTitle}\n`;
      csv += `Generated on: ${new Date().toLocaleDateString()}\n`;
      csv += `Time: ${new Date().toLocaleTimeString()}\n\n`;
      categoryBlocks.forEach(function(block) {
        var categoryTitle = block.querySelector('.category-title')?.textContent.trim() || 'Category';
        var specItems = block.querySelectorAll('.spec-item');
        csv += `\n=== ${categoryTitle.toUpperCase()} ===\n`;
        csv += `Parameter,Specification\n`;
        specItems.forEach(function(item) {
          var label = item.querySelector('.spec-label')?.textContent.trim() || '';
          var detail = item.querySelector('.spec-detail')?.textContent.trim() || '';
          var cleanLabel = label.replace(/\s+/g, ' ').replace(/"/g, '""');
          var cleanDetail = detail.replace(/\s+/g, ' ').replace(/"/g, '""');
          var csvLabel = (cleanLabel.includes(',') || cleanLabel.includes('"') || cleanLabel.includes('\n')) 
            ? `"${cleanLabel}"` : cleanLabel;
          var csvDetail = (cleanDetail.includes(',') || cleanDetail.includes('"') || cleanDetail.includes('\n')) 
            ? `"${cleanDetail}"` : cleanDetail;
          if (csvLabel && csvDetail) {
            csv += `${csvLabel},${csvDetail}\n`;
          }
        });
        csv += '\n';
      });
      var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      var link = document.createElement('a');
      var url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      var filename = productTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase() + '_specifications.csv';
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }
    window.downloadSpecifications = downloadSpecifications;

    // Download Full Page as Image
    function downloadPageAsImage() {
      var productTitle = document.querySelector('.product-title')?.textContent || 'Product';
      var section = document.querySelector('main') || document.body; // fallback to body if no main
      var btn = document.querySelector('.btn-download');
      if (btn) btn.disabled = true;
      if (btn) btn.textContent = 'Generating...';
      html2canvas(section, {
        backgroundColor: '#fff',
        useCORS: true,
        scale: 2
      }).then(function(canvas) {
        var link = document.createElement('a');
        link.href = canvas.toDataURL('image/png');
        var filename = productTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase() + '_product.png';
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        if (btn) btn.disabled = false;
        if (btn) btn.textContent = 'Download Image';
      }).catch(function() {
        if (btn) btn.disabled = false;
        if (btn) btn.textContent = 'Download Image';
        alert('Failed to generate image. Please try again.');
      });
    }
    window.downloadPageAsImage = downloadPageAsImage;

    // Tab switching
    function showSpecGroup(index) {
      var tabs = document.querySelectorAll('.nav-tab');
      var groups = document.querySelectorAll('.spec-group');
      tabs.forEach(function(tab, i) {
        tab.classList.toggle('active', i === index);
      });
      groups.forEach(function(group, i) {
        group.classList.toggle('active', i === index);
      });
    }
    window.showSpecGroup = showSpecGroup;

    // Initialize first thumbnail/tab/group on DOMContentLoaded
    var firstThumbnail = document.querySelector('.thumbnail-btn');
    if (firstThumbnail) firstThumbnail.classList.add('active');
    var firstTab = document.querySelector('.nav-tab');
    var firstGroup = document.querySelector('.spec-group');
    if (firstTab && firstGroup) {
      firstTab.classList.add('active');
      firstGroup.classList.add('active');
    }


  });
</script>

<style>
  /* CSS Variables for Professional Theme */
  :root {
    --primary-color: #2dd4bf; /* teal-400 */
    --primary-hover: #14b8a6; /* teal-500 */
    --secondary-color: #6b7280;
    --success-color: #059669;
    --background-primary: #ffffff;
    --background-secondary: #f8fafc;
    --background-tertiary: #f1f5f9;
    --text-primary: #1f2937;
    --text-secondary: #4b5563;
    --text-muted: #6b7280;
    --border-color: #e5e7eb;
    --border-color-strong: #d1d5db;
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
    --radius-sm: 6px;
    --radius-md: 8px;
    --radius-lg: 12px;
  }

  /* Base Styles */
  * {
    box-sizing: border-box;
  }

  .container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* Professional Header */
  
  .header-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><g fill="%23ffffff" fill-opacity="0.03"><circle cx="30" cy="30" r="2"/></g></g></svg>');
    opacity: 0.3;
  }

  .breadcrumbs {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 0.875rem;
    position: relative;
    z-index: 1;
  }

  .breadcrumb-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
  }

  .breadcrumb-link:hover {
    color: white;
  }

  .breadcrumb-separator {
    color: rgba(255, 255, 255, 0.6);
  }

  .breadcrumb-current {
    color: white;
    font-weight: 500;
  }

  /* Product Overview */
  .product-overview {
    padding: 4rem 0;
    background: var(--background-primary);
  }

  .product-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: start;
  }

  /* Professional Gallery */
  .product-gallery {
    position: sticky;
    top: 2rem;
  }

  .gallery-main {
    margin-bottom: 1.5rem;
  }

  .main-image-container {
    position: relative;
    background: var(--background-secondary);
    border-radius: var(--radius-lg);
    padding: 2rem;
    min-height: 400px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid var(--border-color);
    overflow: hidden;
  }

  .main-product-image {
    max-width: 100%;
    max-height: 350px;
    object-fit: contain;
  }

  .image-zoom-indicator {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 0.5rem;
    border-radius: var(--radius-sm);
  }

  .gallery-thumbnails {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .thumbnail-btn {
    width: 80px;
    height: 80px;
    border: 2px solid var(--border-color);
    border-radius: var(--radius-md);
    padding: 0.5rem;
    background: var(--background-secondary);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .thumbnail-btn:hover,
  .thumbnail-btn.active {
    border-color: var(--primary-color);
    box-shadow: var(--shadow-md);
  }

  .thumbnail-btn img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }

  /* Professional Product Details */
  .product-details {
    padding: 1rem 0;
  }

  .product-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .product-category {
    color: var(--primary-color);
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .product-status {
    display: flex;
    gap: 0.5rem;
  }

  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .status-badge.available {
    background: #dcfce7;
    color: var(--success-color);
  }

  .product-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
    line-height: 1.2;
  }

  .product-description {
    margin-bottom: 2.5rem;
  }

  .product-description p {
    font-size: 1.125rem;
    line-height: 1.7;
    color: var(--text-secondary);
  }

  /* Professional Features */
  .product-highlights {
    margin-bottom: 3rem;
  }

  .highlights-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1.5rem;
  }

  .features-grid {
    display: grid;
    gap: 1rem;
  }

  .feature-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 1rem;
    background: var(--background-secondary);
    border-radius: var(--radius-md);
    border: 1px solid var(--border-color);
  }

  .feature-icon {
    flex-shrink: 0;
    width: 20px;
    height: 20px;
    color: var(--success-color);
    margin-top: 0.125rem;
  }

  .feature-text {
    color: var(--text-secondary);
    line-height: 1.5;
  }

  /* Professional Action Buttons */
  .product-actions {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.5rem;
    border-radius: var(--radius-md);
    font-weight: 600;
    font-size: 0.875rem;
    text-decoration: none;
    border: none;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: box-shadow 0.3s cubic-bezier(0.4,0,0.2,1), transform 0.2s cubic-bezier(0.4,0,0.2,1);
  }

  .btn-primary {
    background: var(--primary-color);
    color: white;
  }

  .btn-primary:hover, .btn-secondary:hover {
    box-shadow: 0 8px 24px 0 rgba(45,212,191,0.18), 0 1.5px 4px 0 rgba(0,0,0,0.08);
    transform: translateY(-2px) scale(1.04);
    transition: box-shadow 0.3s cubic-bezier(0.4,0,0.2,1), transform 0.2s cubic-bezier(0.4,0,0.2,1);
  }

  .btn-secondary {
    background: transparent;
    color: var(--text-secondary);
    border: 1px solid var(--border-color-strong);
  }

  .btn-secondary:hover {
    background: var(--background-secondary);
    border-color: var(--text-secondary);
  }

  .hover-effect {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba(255, 255, 255, 0.5);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%);
    transform-origin: 50% 50%;
    pointer-events: none;
  }

  .btn:hover .hover-effect {
    animation: ripple 600ms ease-out;
  }

  @keyframes ripple {
    0% {
      transform: scale(0, 0);
      opacity: 0.5;
    }
    100% {
      transform: scale(20, 20);
      opacity: 0;
    }
  }

  /* Professional Specifications */
  .specifications-section {
    padding: 5rem 0;
    background: var(--background-secondary);
  }
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    margin-bottom: 3rem;
    gap: 2rem;
  }
  .header-content h2.section-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0 0 0.5rem 0;
  }
  .section-subtitle {
    color: var(--text-secondary);
    font-size: 1rem;
    margin: 0;
  }
  .btn-download {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: white;
    color: var(--primary-color);
    border: 1px solid var(--primary-color);
    padding: 0.75rem 1.25rem;
    border-radius: var(--radius-md);
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  .btn-download:hover {
    background: var(--primary-color);
    color: white;
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }
  .specifications-container {
    background: white;
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-xl);
    overflow: hidden;
  }
  .specs-content-list {
    padding: 0;
  }
  .spec-category-block {
    border-bottom: 1px solid var(--border-color);
  }
  .spec-category-block:last-child {
    border-bottom: none;
  }
  .category-header {
    padding: 2rem 2rem 1rem 2rem;
    background: linear-gradient(135deg, var(--background-tertiary) 0%, var(--background-secondary) 100%);
    border-bottom: 1px solid var(--border-color);
  }
  .category-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0 0 1rem 0;
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  .category-title::before {
    content: '';
    width: 4px;
    height: 24px;
    background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
    border-radius: 2px;
  }
  .category-divider {
    height: 2px;
    background: linear-gradient(90deg, var(--primary-color) 0%, transparent 100%);
    border-radius: 1px;
  }
  .category-content {
    padding: 2rem;
  }
  .specs-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  .spec-item {
    background: var(--background-secondary);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-md);
    padding: 1.5rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }
  .spec-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: linear-gradient(90deg, var(--primary-color), var(--primary-hover));
    transform: translateX(-100%);
    transition: transform 0.3s ease;
  }
  .spec-item:hover {
    background: white;
    border-color: var(--primary-color);
    box-shadow: var(--shadow-md);
    transform: translateY(-2px);
  }
  .spec-item:hover::before {
    transform: translateX(0);
  }
  .spec-label {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  .spec-label::after {
    content: '';
    flex-grow: 1;
    height: 1px;
    background: var(--border-color);
  }
  .spec-detail {
    font-size: 1rem;
    color: var(--text-secondary);
    line-height: 1.6;
    font-weight: 500;
  }
  @media (min-width: 1024px) {
    .specs-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  @media (min-width: 1280px) {
    .specs-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  @media (max-width: 768px) {
    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.5rem;
    }
    .category-header {
      padding: 1.5rem 1rem 1rem 1rem;
    }
    .category-title {
      font-size: 1.25rem;
    }
    .category-content {
      padding: 1.5rem 1rem;
    }
    .specs-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    .spec-item {
      padding: 1rem;
    }
  }
  @media (max-width: 480px) {
    .specifications-section {
      padding: 3rem 0;
    }
    .section-header h2.section-title {
      font-size: 1.75rem;
    }
    .category-header {
      padding: 1rem;
    }
    .category-title {
      font-size: 1.125rem;
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    .category-content {
      padding: 1rem;
    }
    .spec-item {
      padding: 0.875rem;
    }
    .spec-label {
      font-size: 0.8rem;
    }
    .spec-detail {
      font-size: 0.9rem;
    }
  }
  @media print {
    .btn-download {
      display: none;
    }
    .specifications-section {
      background: white;
    }
    .spec-category-block {
      page-break-inside: avoid;
      margin-bottom: 2rem;
    }
    .category-header {
      background: #f8f9fa !important;
      border: 1px solid #000;
    }
    .spec-item {
      background: white !important;
      border: 1px solid #000;
      break-inside: avoid;
    }
  }
</style>