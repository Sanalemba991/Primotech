---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Whatsapp from '../../components/Whatsapp.tsx';

const tips = await getCollection('tips');

// Sort tips by date (newest first)
const sortedTips = tips.sort((a, b) => new Date(b.data.startDate).getTime() - new Date(a.data.startDate).getTime());
---

<Layout title="Tips & Guides Collection | Primotech" description="Explore our comprehensive collection of technology tips, guides, and insights for security solutions.">
  <!-- Hero Banner Section -->
  <section class="relative h-[60vh] lg:h-[70vh] overflow-hidden tips-hero">
    <!-- Background Image -->
    <div class="absolute inset-0">
      <img 
        src="/images/blog-banner-bg.png" 
        alt="Modern technology workspace with security solutions" 
        class="w-full h-full object-cover hero-image-reveal"
      />
      <div class="absolute inset-0 bg-black/40 hero-overlay-fade"></div>
      <div class="absolute inset-0 bg-gradient-to-r from-teal-900/80 to-transparent hero-overlay-fade"></div>
    </div>

    <!-- Hero Content -->
    <div class="relative z-10 flex items-center h-full">
      <div class="container mx-auto px-6 lg:px-8">
        <div class="max-w-2xl hero-content-reveal">
          <h1 class="text-5xl lg:text-7xl font-bold text-white mb-6 hero-title-animate">
            TIPS & GUIDES
          </h1>
          <p class="text-xl lg:text-2xl text-gray-200 mb-4 hero-subtitle-animate">
            Expert insights and practical solutions
          </p>
          <p class="text-lg lg:text-xl text-gray-300 mb-8 hero-description-animate">
            for your security technology needs. Discover comprehensive guides to enhance your experience.
          </p>
          
          <!-- Professional Explore Button -->
          <div class="hero-button-animate">
            <button 
              id="explore-btn"
              class="inline-flex items-center px-6 py-3 bg-transparent border-2 border-teal-400 text-teal-400 hover:bg-teal-400 hover:text-white font-semibold text-base rounded-full transition-all duration-300 group transform hover:scale-105 hover:shadow-lg relative overflow-hidden"
            >
              Explore Articles
              <svg class="ml-2 w-4 h-4 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <main class="min-h-screen">
    <!-- Tips List Section -->
    <section class="py-12 md:py-16 lg:py-20 tips-section">
      <div class="container mx-auto px-4 max-w-4xl">
        <!-- Tips List -->
        <div class="tips-list" id="tips-container">
          {sortedTips.map((tip, index) => (
            <article 
              class="tip-card group bg-white flex flex-col lg:flex-row items-stretch py-6 px-2 sm:px-3 md:px-4 mb-0 relative border-b border-gray-200"
              data-animate 
              data-animate-delay={200 + (index * 100)}
              style="box-shadow:none; border-left: none; border-right: none; border-top: none;"
            >
              <a href={`/tips/${tip.slug}`} class="flex flex-col lg:flex-row w-full gap-4 md:gap-6 lg:gap-8">
                {/* Image Section */}
                <div class="w-full lg:w-[420px] flex-shrink-0 flex items-center justify-center">
                  <img 
                    src={tip.data.eventImage} 
                    alt={tip.data.eventImageAlt}
                    class="w-full h-[180px] sm:h-[200px] md:h-[220px] object-cover rounded-lg border border-gray-200 bg-gray-50"
                    loading="lazy"
                  />
                </div>
                {/* Content Section */}
                <div class="flex flex-col justify-center flex-1 py-3 lg:py-0">
                  <div class="flex items-center space-x-4 mb-1 sm:mb-2 mt-1 sm:mt-2">
                    <span class="text-gray-600 text-xs font-medium">{new Date(tip.data.startDate || Date.now()).toLocaleDateString('en-CA')}</span>
                  </div>
                  <h3 class="text-xl sm:text-2xl font-semibold text-gray-900 mb-1 sm:mb-2 leading-snug">
                    {tip.data.title}
                  </h3>
                  <p class="text-gray-700 text-sm sm:text-base mb-2 line-clamp-2 sm:line-clamp-3">
                    {tip.data.subTitle}
                  </p>
                  <div class="flex items-center text-teal-500 font-semibold text-sm sm:text-base group-hover:text-teal-600 transition-colors duration-300 pt-1 sm:pt-2">
                    <span class="mr-2">Read Full Article</span>
                    <svg class="w-4 h-4 sm:w-5 sm:h-5 transition-transform duration-300 group-hover:translate-x-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                    </svg>
                  </div>
                </div>
              </a>
              {/* Divider Line (except for last item) */}
              {index < sortedTips.length - 1 && (
                null
              )}
            </article>
          ))}
        </div>
      </div>
    </section>
  </main>
   <Whatsapp client:load />
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Explore button functionality
    const exploreBtn = document.getElementById('explore-btn');
    
    exploreBtn?.addEventListener('click', function(e) {
      // Create ripple effect
      const ripple = document.createElement('div');
      const rect = this.getBoundingClientRect();
      const size = Math.max(rect.width, rect.height);
      const x = e.clientX - rect.left - size / 2;
      const y = e.clientY - rect.top - size / 2;
      
      ripple.className = 'absolute rounded-full bg-white/30 pointer-events-none animate-ping';
      ripple.style.cssText = `
        width: ${size}px;
        height: ${size}px;
        left: ${x}px;
        top: ${y}px;
        transform: scale(0);
        animation: ripple 0.8s ease-out;
      `;
      
      this.appendChild(ripple);
      
      // Remove ripple after animation
      setTimeout(() => ripple.remove(), 800);
      
      // Smooth scroll to content
      setTimeout(() => {
        const tipsSection = document.getElementById('tips-container');
        if (tipsSection) {
          tipsSection.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }
      }, 200);
    });
    
    // Intersection Observer for animations
    const observerOptions = {
      threshold: [0, 0.1, 0.3],
      rootMargin: '0px 0px -100px 0px'
    };

    // Hero section observer
    const heroObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && entry.intersectionRatio > 0.1) {
          entry.target.classList.add('hero-revealed');
          heroObserver.unobserve(entry.target);
        }
      });
    }, observerOptions);

    // Section observers
    const sectionObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && entry.intersectionRatio > 0.1) {
          entry.target.classList.add('section-revealed');
          sectionObserver.unobserve(entry.target);
        }
      });
    }, observerOptions);

    // Card observer
    const cardObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-visible');
          cardObserver.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1, rootMargin: '0px 0px -50px 0px' });
    
    // Initialize animations
    const heroSection = document.querySelector('.tips-hero');
    const tipsSection = document.querySelector('.tips-section');
    
    if (heroSection) {
      heroObserver.observe(heroSection);
    }
    
    if (tipsSection) {
      sectionObserver.observe(tipsSection);
    }
    
    // Observe all tip cards
    document.querySelectorAll('[data-animate]').forEach((el) => {
      cardObserver.observe(el);
    });
  });
</script>

<style>
  /* Global styles */
  html {
    scroll-behavior: smooth;
  }
  
  body {
    max-width: 100vw;
    overflow-x: hidden;
  }

  * {
    box-sizing: border-box;
  }

  /* Container width fix */
  .container {
    max-width: 1200px;
    width: 100%;
  }

  /* Hero animations */
  .tips-hero {
    opacity: 0;
    transform: translateY(50px);
    transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .tips-hero.hero-revealed {
    opacity: 1;
    transform: translateY(0);
  }

  .hero-image-reveal {
    transform: scale(1.1);
    opacity: 0;
    transition: all 2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .tips-hero.hero-revealed .hero-image-reveal {
    transform: scale(1);
    opacity: 1;
    transition-delay: 0.2s;
  }

  .hero-overlay-fade {
    opacity: 0;
    transition: opacity 1s ease-out;
  }

  .tips-hero.hero-revealed .hero-overlay-fade {
    opacity: 1;
    transition-delay: 0.4s;
  }

  .hero-content-reveal {
    opacity: 0;
    transform: translateX(-60px);
    transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .tips-hero.hero-revealed .hero-content-reveal {
    opacity: 1;
    transform: translateX(0);
    transition-delay: 0.6s;
  }

  /* Staggered hero text animations */
  .hero-title-animate,
  .hero-subtitle-animate,
  .hero-description-animate,
  .hero-button-animate {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .tips-hero.hero-revealed .hero-title-animate {
    opacity: 1;
    transform: translateY(0);
    transition-delay: 0.8s;
  }

  .tips-hero.hero-revealed .hero-subtitle-animate {
    opacity: 1;
    transform: translateY(0);
    transition-delay: 1s;
  }

  .tips-hero.hero-revealed .hero-description-animate {
    opacity: 1;
    transform: translateY(0);
    transition-delay: 1.2s;
  }

  .tips-hero.hero-revealed .hero-button-animate {
    opacity: 1;
    transform: translateY(0);
    transition-delay: 1.4s;
  }

  /* Tips Section animations */
  .tips-section {
    opacity: 0;
    transform: translateY(60px);
    transition: all 1s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .tips-section.section-revealed {
    opacity: 1;
    transform: translateY(0);
  }

  /* Tips List */
  .tips-list {
    max-width: 100%;
    margin: 0 auto;
  }
  
  .tip-card {
    transition: all 0.5s cubic-bezier(0.22, 1, 0.36, 1);
    opacity: 0;
    transform: translateY(30px);
  }
  
  .tip-card:hover {
    transform: translateY(-4px);
  }

  .tip-card.animate-visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Explore button shimmer effect */
  #explore-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    transition: left 0.8s ease;
  }

  #explore-btn:hover::before {
    left: 100%;
  }

  /* Ripple animation */
  @keyframes ripple {
    to {
      transform: scale(2);
      opacity: 0;
    }
  }

  /* Line clamping */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .tip-card a {
      flex-direction: column;
    }
  }

  @media (max-width: 768px) {
    .hero-content-reveal {
      transform: translateY(40px);
    }
    
    .tips-hero.hero-revealed .hero-content-reveal {
      transform: translateY(0);
    }
    
    .container {
      padding-left: 1rem;
      padding-right: 1rem;
    }
    
    .tip-card {
      padding: 1.25rem 0.5rem;
    }
    
    .tip-card h3 {
      font-size: 1.25rem;
    }
  }
  
  @media (max-width: 480px) {
    .tip-card {
      padding: 1rem 0.25rem;
    }
    
    .tip-card img {
      height: 160px;
    }
    
    .tip-card h3 {
      font-size: 1.125rem;
      margin-bottom: 0.5rem;
    }
    
    .tip-card p {
      font-size: 0.875rem;
      -webkit-line-clamp: 2;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .tips-hero,
    .tips-section,
    .hero-image-reveal,
    .hero-overlay-fade,
    .hero-content-reveal,
    .hero-title-animate,
    .hero-subtitle-animate,
    .hero-description-animate,
    .hero-button-animate,
    .tip-card {
      animation: none;
      opacity: 1;
      transform: none;
      transition: none;
    }
  }

  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 6px;
  }

  ::-webkit-scrollbar-track {
    background: #f1f5f9;
  }

  ::-webkit-scrollbar-thumb {
    background: #64748b;
    border-radius: 3px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #475569;
  }

  /* Add style for flat card and image border */
  .tip-card {
    box-shadow: none !important;
    border-radius: 0 !important;
  }
</style>